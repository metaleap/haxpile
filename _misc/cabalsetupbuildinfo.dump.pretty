FromCabal (Just ["lib:haxpile-apptests"])



(BuildFlags {
	buildProgramPaths = [],
	 buildProgramArgs = [("ghc",
	["-ddump-hi",
	"-ddump-to-file"])],
	 buildDistPref = Flag ".stack-work\\dist\\ca59d0ab",
	 buildVerbosity = Flag Normal,
	 buildNumJobs = NoFlag,
	 buildArgs = ["lib:haxpile-apptests"]})





	 (PackageDescription {
	package = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxpile-apptests"},
		 pkgVersion = Version {
			versionBranch = [0,
			1,
			0,
			0],
			 versionTags = []}},
	 license = GPL Nothing,
	 licenseFiles = ["LICENSE"],
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 testedWith = [],
	 homepage = "https://github.com/metaleap/haxpile-apptests",
	 pkgUrl = "",
	 bugReports = "",
	 sourceRepos = [],
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 customFieldsPD = [],
	 buildDepends = [Dependency (PackageName {
		unPackageName = "base"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [4,
		9,
		1,
		0],
		 versionTags = []}))),
	Dependency (PackageName {
		unPackageName = "haxbase"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [1,
		0,
		0,
		3],
		 versionTags = []}))),
	Dependency (PackageName {
		unPackageName = "haxpile"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [0,
		1,
		0,
		0],
		 versionTags = []})))],
	 specVersionRaw = Right (UnionVersionRanges (ThisVersion (Version {
		versionBranch = [1,
		10],
		 versionTags = []})) (LaterVersion (Version {
		versionBranch = [1,
		10],
		 versionTags = []}))),
	 buildType = Just Custom,
	 setupBuildInfo = Just (SetupBuildInfo {
		setupDepends = [Dependency (PackageName {
			unPackageName = "base"}) AnyVersion,
		Dependency (PackageName {
			unPackageName = "haxpile"}) AnyVersion],
		 defaultSetupDepends = False}),
	 library = Just (Library {
		exposedModules = [ModuleName ["HxpT",
		"T01_PrimAdd"],
		ModuleName ["HxpT",
		"T02_FacRec"]],
		 reexportedModules = [],
		 requiredSignatures = [],
		 exposedSignatures = [],
		 libExposed = True,
		 libBuildInfo = BuildInfo {
			buildable = True,
			 buildTools = [],
			 cppOptions = [],
			 ccOptions = [],
			 ldOptions = [],
			 pkgconfigDepends = [],
			 frameworks = [],
			 extraFrameworkDirs = [],
			 cSources = [],
			 jsSources = [],
			 hsSourceDirs = ["src"],
			 otherModules = [],
			 defaultLanguage = Just Haskell2010,
			 otherLanguages = [],
			 defaultExtensions = [],
			 otherExtensions = [],
			 oldExtensions = [],
			 extraLibs = [],
			 extraGHCiLibs = [],
			 extraLibDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
			 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
			 includes = [],
			 installIncludes = [],
			 options = [(GHC,
			["-j2",
			"-O0",
			"-ddump-stg"])],
			 profOptions = [],
			 sharedOptions = [],
			 customFieldsBI = [],
			 targetBuildDepends = [Dependency (PackageName {
				unPackageName = "base"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [4,
				9,
				1,
				0],
				 versionTags = []}))),
			Dependency (PackageName {
				unPackageName = "haxbase"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [1,
				0,
				0,
				3],
				 versionTags = []}))),
			Dependency (PackageName {
				unPackageName = "haxpile"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [0,
				1,
				0,
				0],
				 versionTags = []})))],
			 targetBuildRenaming = fromList []}}),
	 executables = [],
	 testSuites = [],
	 benchmarks = [],
	 dataFiles = [],
	 dataDir = "",
	 extraSrcFiles = [],
	 extraTmpFiles = [],
	 extraDocFiles = []})







	 (LocalBuildInfo {
	configFlags = ConfigFlags {
		configPrograms_ = Last' {getLast' = Just []},
	 configProgramPaths = [("ghc",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\ghc.EXE"),
	("ghc-pkg",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\ghc-pkg.EXE")],
	 configProgramArgs = [],
	 configProgramPathExtra = [],
	 configHcFlavor = Flag GHC,
	 configHcPath = NoFlag,
	 configHcPkg = NoFlag,
	 configVanillaLib = Flag True,
	 configProfLib = NoFlag,
	 configSharedLib = NoFlag,
	 configDynExe = Flag False,
	 configProfExe = NoFlag,
	 configProf = NoFlag,
	 configProfDetail = NoFlag,
	 configProfLibDetail = NoFlag,
	 configConfigureArgs = [],
	 configOptimization = Flag NormalOptimisation,
	 configProgPrefix = Flag "",
	 configProgSuffix = Flag "",
	 configInstallDirs = InstallDirs {
		prefix = NoFlag,
		 bindir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin",
		 libdir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib",
		 libsubdir = NoFlag,
		 dynlibdir = NoFlag,
		 libexecdir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\libexec",
		 includedir = NoFlag,
		 datadir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share",
		 datasubdir = NoFlag,
		 docdir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
		 mandir = NoFlag,
		 htmldir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
		 haddockdir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
		 sysconfdir = Flag "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\etc"},
	 configScratchDir = NoFlag,
	 configExtraLibDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 configExtraFrameworkDirs = [],
	 configExtraIncludeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
	 configIPID = NoFlag,
	 configDistPref = Flag ".stack-work\\dist\\ca59d0ab",
	 configVerbosity = Flag Normal,
	 configUserInstall = Flag True,
	 configPackageDBs = [Nothing,
	Just GlobalPackageDB,
	Just (SpecificPackageDB "C:\\sr\\snapshots\\feb626b3\\pkgdb"),
	Just (SpecificPackageDB "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\pkgdb")],
	 configGHCiLib = Flag True,
	 configSplitObjs = Flag False,
	 configStripExes = Flag True,
	 configStripLibs = Flag True,
	 configConstraints = [],
	 configDependencies = [(PackageName {
		unPackageName = "base"},
	SimpleUnitId (ComponentId "base-4.9.1.0")),
	(PackageName {
		unPackageName = "haxbase"},
	SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM")),
	(PackageName {
		unPackageName = "haxpile"},
	SimpleUnitId (ComponentId "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"))],
	 configConfigurationsFlags = [],
	 configTests = Flag False,
	 configBenchmarks = Flag False,
	 configCoverage = Flag False,
	 configLibCoverage = NoFlag,
	 configExactConfiguration = Flag True,
	 configFlagError = NoFlag,
	 configRelocatable = Flag False,
	 configDebugInfo = Flag NoDebugInfo,
	 configAllowNewer = Nothing},
 flagAssignment = [],
 extraConfigArgs = [],
 installDirTemplates = InstallDirs {
	prefix = "C:\\Users\\roxor\\AppData\\Roaming\\cabal",
	 bindir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin",
	 libdir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib",
	 libsubdir = "$abi\\$libname",
	 dynlibdir = "$libdir\\$abi",
	 libexecdir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\libexec",
	 includedir = "$libdir\\$libsubdir\\include",
	 datadir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share",
	 datasubdir = "$abi\\$pkgid",
	 docdir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
	 mandir = "$datadir\\man",
	 htmldir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
	 haddockdir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-apptests-0.1.0.0",
	 sysconfdir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\etc"},
 compiler = Compiler {
	compilerId = CompilerId GHC (Version {
		versionBranch = [8,
		0,
		2],
		 versionTags = []}),
	 compilerAbiTag = NoAbiTag,
	 compilerCompat = [],
	 compilerLanguages = [(Haskell98,
	"-XHaskell98"),
	(Haskell2010,
	"-XHaskell2010")],
	 compilerExtensions = [(UnknownExtension "Haskell98",
	"-XHaskell98"),
	(UnknownExtension "Haskell2010",
	"-XHaskell2010"),
	(EnableExtension Unsafe,
	"-XUnsafe"),
	(EnableExtension Trustworthy,
	"-XTrustworthy"),
	(EnableExtension Safe,
	"-XSafe"),
	(EnableExtension AllowAmbiguousTypes,
	"-XAllowAmbiguousTypes"),
	(DisableExtension AllowAmbiguousTypes,
	"-XNoAllowAmbiguousTypes"),
	(UnknownExtension "AlternativeLayoutRule",
	"-XAlternativeLayoutRule"),
	(UnknownExtension "NoAlternativeLayoutRule",
	"-XNoAlternativeLayoutRule"),
	(UnknownExtension "AlternativeLayoutRuleTransitional",
	"-XAlternativeLayoutRuleTransitional"),
	(UnknownExtension "NoAlternativeLayoutRuleTransitional",
	"-XNoAlternativeLayoutRuleTransitional"),
	(EnableExtension Arrows,
	"-XArrows"),
	(DisableExtension Arrows,
	"-XNoArrows"),
	(EnableExtension AutoDeriveTypeable,
	"-XAutoDeriveTypeable"),
	(DisableExtension AutoDeriveTypeable,
	"-XNoAutoDeriveTypeable"),
	(EnableExtension BangPatterns,
	"-XBangPatterns"),
	(DisableExtension BangPatterns,
	"-XNoBangPatterns"),
	(EnableExtension BinaryLiterals,
	"-XBinaryLiterals"),
	(DisableExtension BinaryLiterals,
	"-XNoBinaryLiterals"),
	(EnableExtension CApiFFI,
	"-XCApiFFI"),
	(DisableExtension CApiFFI,
	"-XNoCApiFFI"),
	(EnableExtension CPP,
	"-XCPP"),
	(DisableExtension CPP,
	"-XNoCPP"),
	(EnableExtension ConstrainedClassMethods,
	"-XConstrainedClassMethods"),
	(DisableExtension ConstrainedClassMethods,
	"-XNoConstrainedClassMethods"),
	(EnableExtension ConstraintKinds,
	"-XConstraintKinds"),
	(DisableExtension ConstraintKinds,
	"-XNoConstraintKinds"),
	(EnableExtension DataKinds,
	"-XDataKinds"),
	(DisableExtension DataKinds,
	"-XNoDataKinds"),
	(EnableExtension DatatypeContexts,
	"-XDatatypeContexts"),
	(DisableExtension DatatypeContexts,
	"-XNoDatatypeContexts"),
	(EnableExtension DefaultSignatures,
	"-XDefaultSignatures"),
	(DisableExtension DefaultSignatures,
	"-XNoDefaultSignatures"),
	(EnableExtension DeriveAnyClass,
	"-XDeriveAnyClass"),
	(DisableExtension DeriveAnyClass,
	"-XNoDeriveAnyClass"),
	(EnableExtension DeriveDataTypeable,
	"-XDeriveDataTypeable"),
	(DisableExtension DeriveDataTypeable,
	"-XNoDeriveDataTypeable"),
	(EnableExtension DeriveFoldable,
	"-XDeriveFoldable"),
	(DisableExtension DeriveFoldable,
	"-XNoDeriveFoldable"),
	(EnableExtension DeriveFunctor,
	"-XDeriveFunctor"),
	(DisableExtension DeriveFunctor,
	"-XNoDeriveFunctor"),
	(EnableExtension DeriveGeneric,
	"-XDeriveGeneric"),
	(DisableExtension DeriveGeneric,
	"-XNoDeriveGeneric"),
	(EnableExtension DeriveLift,
	"-XDeriveLift"),
	(DisableExtension DeriveLift,
	"-XNoDeriveLift"),
	(EnableExtension DeriveTraversable,
	"-XDeriveTraversable"),
	(DisableExtension DeriveTraversable,
	"-XNoDeriveTraversable"),
	(EnableExtension DisambiguateRecordFields,
	"-XDisambiguateRecordFields"),
	(DisableExtension DisambiguateRecordFields,
	"-XNoDisambiguateRecordFields"),
	(EnableExtension DoAndIfThenElse,
	"-XDoAndIfThenElse"),
	(DisableExtension DoAndIfThenElse,
	"-XNoDoAndIfThenElse"),
	(EnableExtension DoRec,
	"-XDoRec"),
	(DisableExtension DoRec,
	"-XNoDoRec"),
	(EnableExtension DuplicateRecordFields,
	"-XDuplicateRecordFields"),
	(DisableExtension DuplicateRecordFields,
	"-XNoDuplicateRecordFields"),
	(EnableExtension EmptyCase,
	"-XEmptyCase"),
	(DisableExtension EmptyCase,
	"-XNoEmptyCase"),
	(EnableExtension EmptyDataDecls,
	"-XEmptyDataDecls"),
	(DisableExtension EmptyDataDecls,
	"-XNoEmptyDataDecls"),
	(EnableExtension ExistentialQuantification,
	"-XExistentialQuantification"),
	(DisableExtension ExistentialQuantification,
	"-XNoExistentialQuantification"),
	(EnableExtension ExplicitForAll,
	"-XExplicitForAll"),
	(DisableExtension ExplicitForAll,
	"-XNoExplicitForAll"),
	(EnableExtension ExplicitNamespaces,
	"-XExplicitNamespaces"),
	(DisableExtension ExplicitNamespaces,
	"-XNoExplicitNamespaces"),
	(EnableExtension ExtendedDefaultRules,
	"-XExtendedDefaultRules"),
	(DisableExtension ExtendedDefaultRules,
	"-XNoExtendedDefaultRules"),
	(EnableExtension FlexibleContexts,
	"-XFlexibleContexts"),
	(DisableExtension FlexibleContexts,
	"-XNoFlexibleContexts"),
	(EnableExtension FlexibleInstances,
	"-XFlexibleInstances"),
	(DisableExtension FlexibleInstances,
	"-XNoFlexibleInstances"),
	(EnableExtension ForeignFunctionInterface,
	"-XForeignFunctionInterface"),
	(DisableExtension ForeignFunctionInterface,
	"-XNoForeignFunctionInterface"),
	(EnableExtension FunctionalDependencies,
	"-XFunctionalDependencies"),
	(DisableExtension FunctionalDependencies,
	"-XNoFunctionalDependencies"),
	(EnableExtension GADTSyntax,
	"-XGADTSyntax"),
	(DisableExtension GADTSyntax,
	"-XNoGADTSyntax"),
	(EnableExtension GADTs,
	"-XGADTs"),
	(DisableExtension GADTs,
	"-XNoGADTs"),
	(EnableExtension GHCForeignImportPrim,
	"-XGHCForeignImportPrim"),
	(DisableExtension GHCForeignImportPrim,
	"-XNoGHCForeignImportPrim"),
	(EnableExtension GeneralizedNewtypeDeriving,
	"-XGeneralizedNewtypeDeriving"),
	(DisableExtension GeneralizedNewtypeDeriving,
	"-XNoGeneralizedNewtypeDeriving"),
	(EnableExtension ImplicitParams,
	"-XImplicitParams"),
	(DisableExtension ImplicitParams,
	"-XNoImplicitParams"),
	(EnableExtension ImplicitPrelude,
	"-XImplicitPrelude"),
	(DisableExtension ImplicitPrelude,
	"-XNoImplicitPrelude"),
	(EnableExtension ImpredicativeTypes,
	"-XImpredicativeTypes"),
	(DisableExtension ImpredicativeTypes,
	"-XNoImpredicativeTypes"),
	(EnableExtension IncoherentInstances,
	"-XIncoherentInstances"),
	(DisableExtension IncoherentInstances,
	"-XNoIncoherentInstances"),
	(UnknownExtension "TypeFamilyDependencies",
	"-XTypeFamilyDependencies"),
	(UnknownExtension "NoTypeFamilyDependencies",
	"-XNoTypeFamilyDependencies"),
	(EnableExtension InstanceSigs,
	"-XInstanceSigs"),
	(DisableExtension InstanceSigs,
	"-XNoInstanceSigs"),
	(EnableExtension ApplicativeDo,
	"-XApplicativeDo"),
	(DisableExtension ApplicativeDo,
	"-XNoApplicativeDo"),
	(EnableExtension InterruptibleFFI,
	"-XInterruptibleFFI"),
	(DisableExtension InterruptibleFFI,
	"-XNoInterruptibleFFI"),
	(DisableExtension JavaScriptFFI,
	"-XNoJavaScriptFFI"),
	(EnableExtension KindSignatures,
	"-XKindSignatures"),
	(DisableExtension KindSignatures,
	"-XNoKindSignatures"),
	(EnableExtension LambdaCase,
	"-XLambdaCase"),
	(DisableExtension LambdaCase,
	"-XNoLambdaCase"),
	(EnableExtension LiberalTypeSynonyms,
	"-XLiberalTypeSynonyms"),
	(DisableExtension LiberalTypeSynonyms,
	"-XNoLiberalTypeSynonyms"),
	(EnableExtension MagicHash,
	"-XMagicHash"),
	(DisableExtension MagicHash,
	"-XNoMagicHash"),
	(EnableExtension MonadComprehensions,
	"-XMonadComprehensions"),
	(DisableExtension MonadComprehensions,
	"-XNoMonadComprehensions"),
	(EnableExtension MonadFailDesugaring,
	"-XMonadFailDesugaring"),
	(DisableExtension MonadFailDesugaring,
	"-XNoMonadFailDesugaring"),
	(EnableExtension MonoLocalBinds,
	"-XMonoLocalBinds"),
	(DisableExtension MonoLocalBinds,
	"-XNoMonoLocalBinds"),
	(EnableExtension MonoPatBinds,
	"-XMonoPatBinds"),
	(DisableExtension MonoPatBinds,
	"-XNoMonoPatBinds"),
	(EnableExtension MonomorphismRestriction,
	"-XMonomorphismRestriction"),
	(DisableExtension MonomorphismRestriction,
	"-XNoMonomorphismRestriction"),
	(EnableExtension MultiParamTypeClasses,
	"-XMultiParamTypeClasses"),
	(DisableExtension MultiParamTypeClasses,
	"-XNoMultiParamTypeClasses"),
	(EnableExtension MultiWayIf,
	"-XMultiWayIf"),
	(DisableExtension MultiWayIf,
	"-XNoMultiWayIf"),
	(EnableExtension NPlusKPatterns,
	"-XNPlusKPatterns"),
	(DisableExtension NPlusKPatterns,
	"-XNoNPlusKPatterns"),
	(EnableExtension NamedFieldPuns,
	"-XNamedFieldPuns"),
	(DisableExtension NamedFieldPuns,
	"-XNoNamedFieldPuns"),
	(EnableExtension NamedWildCards,
	"-XNamedWildCards"),
	(DisableExtension NamedWildCards,
	"-XNoNamedWildCards"),
	(EnableExtension NegativeLiterals,
	"-XNegativeLiterals"),
	(DisableExtension NegativeLiterals,
	"-XNoNegativeLiterals"),
	(EnableExtension NondecreasingIndentation,
	"-XNondecreasingIndentation"),
	(DisableExtension NondecreasingIndentation,
	"-XNoNondecreasingIndentation"),
	(EnableExtension NullaryTypeClasses,
	"-XNullaryTypeClasses"),
	(DisableExtension NullaryTypeClasses,
	"-XNoNullaryTypeClasses"),
	(EnableExtension NumDecimals,
	"-XNumDecimals"),
	(DisableExtension NumDecimals,
	"-XNoNumDecimals"),
	(EnableExtension OverlappingInstances,
	"-XOverlappingInstances"),
	(DisableExtension OverlappingInstances,
	"-XNoOverlappingInstances"),
	(EnableExtension OverloadedLabels,
	"-XOverloadedLabels"),
	(DisableExtension OverloadedLabels,
	"-XNoOverloadedLabels"),
	(EnableExtension OverloadedLists,
	"-XOverloadedLists"),
	(DisableExtension OverloadedLists,
	"-XNoOverloadedLists"),
	(EnableExtension OverloadedStrings,
	"-XOverloadedStrings"),
	(DisableExtension OverloadedStrings,
	"-XNoOverloadedStrings"),
	(EnableExtension PackageImports,
	"-XPackageImports"),
	(DisableExtension PackageImports,
	"-XNoPackageImports"),
	(EnableExtension ParallelArrays,
	"-XParallelArrays"),
	(DisableExtension ParallelArrays,
	"-XNoParallelArrays"),
	(EnableExtension ParallelListComp,
	"-XParallelListComp"),
	(DisableExtension ParallelListComp,
	"-XNoParallelListComp"),
	(EnableExtension PartialTypeSignatures,
	"-XPartialTypeSignatures"),
	(DisableExtension PartialTypeSignatures,
	"-XNoPartialTypeSignatures"),
	(EnableExtension PatternGuards,
	"-XPatternGuards"),
	(DisableExtension PatternGuards,
	"-XNoPatternGuards"),
	(EnableExtension PatternSignatures,
	"-XPatternSignatures"),
	(DisableExtension PatternSignatures,
	"-XNoPatternSignatures"),
	(EnableExtension PatternSynonyms,
	"-XPatternSynonyms"),
	(DisableExtension PatternSynonyms,
	"-XNoPatternSynonyms"),
	(EnableExtension PolyKinds,
	"-XPolyKinds"),
	(DisableExtension PolyKinds,
	"-XNoPolyKinds"),
	(EnableExtension PolymorphicComponents,
	"-XPolymorphicComponents"),
	(DisableExtension PolymorphicComponents,
	"-XNoPolymorphicComponents"),
	(EnableExtension PostfixOperators,
	"-XPostfixOperators"),
	(DisableExtension PostfixOperators,
	"-XNoPostfixOperators"),
	(EnableExtension QuasiQuotes,
	"-XQuasiQuotes"),
	(DisableExtension QuasiQuotes,
	"-XNoQuasiQuotes"),
	(EnableExtension Rank2Types,
	"-XRank2Types"),
	(DisableExtension Rank2Types,
	"-XNoRank2Types"),
	(EnableExtension RankNTypes,
	"-XRankNTypes"),
	(DisableExtension RankNTypes,
	"-XNoRankNTypes"),
	(EnableExtension RebindableSyntax,
	"-XRebindableSyntax"),
	(DisableExtension RebindableSyntax,
	"-XNoRebindableSyntax"),
	(EnableExtension RecordPuns,
	"-XRecordPuns"),
	(DisableExtension RecordPuns,
	"-XNoRecordPuns"),
	(EnableExtension RecordWildCards,
	"-XRecordWildCards"),
	(DisableExtension RecordWildCards,
	"-XNoRecordWildCards"),
	(EnableExtension RecursiveDo,
	"-XRecursiveDo"),
	(DisableExtension RecursiveDo,
	"-XNoRecursiveDo"),
	(UnknownExtension "RelaxedLayout",
	"-XRelaxedLayout"),
	(UnknownExtension "NoRelaxedLayout",
	"-XNoRelaxedLayout"),
	(EnableExtension RelaxedPolyRec,
	"-XRelaxedPolyRec"),
	(DisableExtension RelaxedPolyRec,
	"-XNoRelaxedPolyRec"),
	(EnableExtension RoleAnnotations,
	"-XRoleAnnotations"),
	(DisableExtension RoleAnnotations,
	"-XNoRoleAnnotations"),
	(EnableExtension ScopedTypeVariables,
	"-XScopedTypeVariables"),
	(DisableExtension ScopedTypeVariables,
	"-XNoScopedTypeVariables"),
	(EnableExtension StandaloneDeriving,
	"-XStandaloneDeriving"),
	(DisableExtension StandaloneDeriving,
	"-XNoStandaloneDeriving"),
	(EnableExtension StaticPointers,
	"-XStaticPointers"),
	(DisableExtension StaticPointers,
	"-XNoStaticPointers"),
	(EnableExtension Strict,
	"-XStrict"),
	(DisableExtension Strict,
	"-XNoStrict"),
	(EnableExtension StrictData,
	"-XStrictData"),
	(DisableExtension StrictData,
	"-XNoStrictData"),
	(EnableExtension TemplateHaskell,
	"-XTemplateHaskell"),
	(DisableExtension TemplateHaskell,
	"-XNoTemplateHaskell"),
	(EnableExtension TemplateHaskellQuotes,
	"-XTemplateHaskellQuotes"),
	(DisableExtension TemplateHaskellQuotes,
	"-XNoTemplateHaskellQuotes"),
	(EnableExtension TraditionalRecordSyntax,
	"-XTraditionalRecordSyntax"),
	(DisableExtension TraditionalRecordSyntax,
	"-XNoTraditionalRecordSyntax"),
	(EnableExtension TransformListComp,
	"-XTransformListComp"),
	(DisableExtension TransformListComp,
	"-XNoTransformListComp"),
	(EnableExtension TupleSections,
	"-XTupleSections"),
	(DisableExtension TupleSections,
	"-XNoTupleSections"),
	(EnableExtension TypeApplications,
	"-XTypeApplications"),
	(DisableExtension TypeApplications,
	"-XNoTypeApplications"),
	(EnableExtension TypeInType,
	"-XTypeInType"),
	(DisableExtension TypeInType,
	"-XNoTypeInType"),
	(EnableExtension TypeFamilies,
	"-XTypeFamilies"),
	(DisableExtension TypeFamilies,
	"-XNoTypeFamilies"),
	(EnableExtension TypeOperators,
	"-XTypeOperators"),
	(DisableExtension TypeOperators,
	"-XNoTypeOperators"),
	(EnableExtension TypeSynonymInstances,
	"-XTypeSynonymInstances"),
	(DisableExtension TypeSynonymInstances,
	"-XNoTypeSynonymInstances"),
	(EnableExtension UnboxedTuples,
	"-XUnboxedTuples"),
	(DisableExtension UnboxedTuples,
	"-XNoUnboxedTuples"),
	(EnableExtension UndecidableInstances,
	"-XUndecidableInstances"),
	(DisableExtension UndecidableInstances,
	"-XNoUndecidableInstances"),
	(EnableExtension UndecidableSuperClasses,
	"-XUndecidableSuperClasses"),
	(DisableExtension UndecidableSuperClasses,
	"-XNoUndecidableSuperClasses"),
	(EnableExtension UnicodeSyntax,
	"-XUnicodeSyntax"),
	(DisableExtension UnicodeSyntax,
	"-XNoUnicodeSyntax"),
	(EnableExtension UnliftedFFITypes,
	"-XUnliftedFFITypes"),
	(DisableExtension UnliftedFFITypes,
	"-XNoUnliftedFFITypes"),
	(EnableExtension ViewPatterns,
	"-XViewPatterns"),
	(DisableExtension ViewPatterns,
	"-XNoViewPatterns")],
	 compilerProperties = fromList [("Booter version",
	"8.0.1"),
	("Build platform",
	"x86_64-unknown-mingw32"),
	("C compiler command",
	"$topdir/../mingw/bin/gcc.exe"),
	("C compiler flags",
	" -fno-stack-protector"),
	("C compiler link flags",
	""),
	("C compiler supports -no-pie",
	"NO"),
	("Debug on",
	"False"),
	("Dynamic by default",
	"NO"),
	("GCC extra via C opts",
	" -fwrapv -fno-builtin"),
	("GHC Dynamic",
	"NO"),
	("GHC Profiled",
	"NO"),
	("Global Package DB",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\package.conf.d"),
	("Haskell CPP command",
	"$topdir/../mingw/bin/gcc.exe"),
	("Haskell CPP flags",
	"-E -undef -traditional"),
	("Have interpreter",
	"YES"),
	("Have native code generator",
	"YES"),
	("Host platform",
	"x86_64-unknown-mingw32"),
	("LLVM llc command",
	"llc"),
	("LLVM opt command",
	"opt"),
	("Leading underscore",
	"NO"),
	("LibDir",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"),
	("Object splitting supported",
	"YES"),
	("Project Git commit id",
	"f710dbb21693dfc3d9eca6a878d2b169541f1694"),
	("Project name",
	"The Glorious Glasgow Haskell Compilation System"),
	("Project version",
	"8.0.2"),
	("RTS expects libdw",
	"NO"),
	("RTS ways",
	"l debug thr thr_debug thr_l thr_p "),
	("Requires unified installed package IDs",
	"YES"),
	("Stage",
	"2"),
	("Support SMP",
	"YES"),
	("Support dynamic-too",
	"NO"),
	("Support parallel --make",
	"YES"),
	("Support reexported-modules",
	"YES"),
	("Support thinning and renaming package flags",
	"YES"),
	("Tables next to code",
	"YES"),
	("Target platform",
	"x86_64-unknown-mingw32"),
	("Unregisterised",
	"NO"),
	("Uses package keys",
	"YES"),
	("Uses unit IDs",
	"YES"),
	("ar command",
	"$topdir/../mingw/bin/ar.exe"),
	("ar flags",
	"q"),
	("ar supports at file",
	"YES"),
	("cross compiling",
	"NO"),
	("dllwrap command",
	"$topdir/../mingw/bin/dllwrap.exe"),
	("ld command",
	"$topdir/../mingw/bin/ld.exe"),
	("ld flags",
	""),
	("ld is GNU ld",
	"YES"),
	("ld supports build-id",
	"YES"),
	("ld supports compact unwind",
	"YES"),
	("ld supports filelist",
	"NO"),
	("libtool command",
	""),
	("perl command",
	"$topdir/../perl/perl.exe"),
	("target arch",
	"ArchX86_64"),
	("target has .ident directive",
	"True"),
	("target has GNU nonexec stack",
	"False"),
	("target has subsections via symbols",
	"False"),
	("target os",
	"OSMinGW32"),
	("target word size",
	"8"),
	("touch command",
	"$topdir/bin/touchy.exe"),
	("windres command",
	"$topdir/../mingw/bin/windres.exe")]},
 hostPlatform = Platform X86_64 Windows,
 buildDir = ".stack-work\\dist\\ca59d0ab\\build",
 componentsConfigs = [(CLibName,
LibComponentLocalBuildInfo {
	componentPackageDeps = [(SimpleUnitId (ComponentId "base-4.9.1.0"),
	PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "base"},
		 pkgVersion = Version {
			versionBranch = [4,
			9,
			1,
			0],
			 versionTags = []}}),
	(SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
	PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxbase"},
		 pkgVersion = Version {
			versionBranch = [1,
			0,
			0,
			3],
			 versionTags = []}}),
	(SimpleUnitId (ComponentId "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"),
	PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxpile"},
		 pkgVersion = Version {
			versionBranch = [0,
			1,
			0,
			0],
			 versionTags = []}})],
	 componentUnitId = SimpleUnitId (ComponentId "haxpile-apptests-0.1.0.0-44jAbuBBaahJsKNnbXzqZC"),
	 componentCompatPackageKey = "haxpile-apptests-0.1.0.0-44jAbuBBaahJsKNnbXzqZC",
	 componentExposedModules = [ExposedModule {
		exposedName = ModuleName ["HxpT",
		"T01_PrimAdd"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HxpT",
		"T02_FacRec"],
		 exposedReexport = Nothing}],
	 componentPackageRenaming = fromList []},
[])],
 installedPkgs = PackageIndex (fromList [(SimpleUnitId (ComponentId "Cabal-1.24.2.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "Cabal"},
		 pkgVersion = Version {
			versionBranch = [1,
			24,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "Cabal-1.24.2.0"),
	 compatPackageKey = "Cabal-1.24.2.0",
	 license = BSD3,
	 copyright = "2003-2006, Isaac Jones\n2005-2011, Duncan Coutts",
	 maintainer = "cabal-devel@haskell.org",
	 author = "Isaac Jones <ijones@syntaxpolice.org>\nDuncan Coutts <duncan@community.haskell.org>",
	 stability = "",
	 homepage = "http://www.haskell.org/cabal/",
	 pkgUrl = "",
	 synopsis = "A framework for packaging Haskell software",
	 description = "The Haskell Common Architecture for Building Applications and\nLibraries: a framework defining a common interface for authors to more\neasily build their Haskell applications in a portable way.\n\nThe Haskell Cabal is part of a larger infrastructure for distributing,\norganizing, and cataloging Haskell libraries and tools.",
	 category = "Distribution",
	 abiHash = AbiHash "3792a773b2c9ae9469e35e74cdb369a9",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"CreatePipe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Internal",
		"TempFile"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"ReadP"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Semigroup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"InstalledPackageInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"License"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Make"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ModuleName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Package"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Check"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Configuration"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Parse"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"PrettyPrint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ParseUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ReadE"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Bench"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build",
		"Macros"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build",
		"PathsModule"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"BuildPaths"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"BuildTarget"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"CCompiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Command"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Compiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Configure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"GHCJS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Haddock"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"HaskellSuite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Hpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Install"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"InstallDirs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"JHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"LHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"LocalBuildInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PackageIndex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PreProcess"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PreProcess",
		"Unlit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Ar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Builtin"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Db"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Find"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"HcPkg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Hpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Ld"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Run"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Script"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Strip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Register"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Setup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"SrcDist"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"ExeV10"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"LibV09"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"Log"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"UHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"UserHooks"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"System"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"TestSuite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Text"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Utils",
		"NubList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Verbosity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Version"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"Extension"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Binary"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Distribution",
	"Compat",
	"CopyFile"],
	ModuleName ["Distribution",
	"Compat",
	"GetShortPathName"],
	ModuleName ["Distribution",
	"Compat",
	"MonadFail"],
	ModuleName ["Distribution",
	"GetOpt"],
	ModuleName ["Distribution",
	"Lex"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"Internal"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"IPI642"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"IPIConvert"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"ImplInfo"],
	ModuleName ["Paths_Cabal"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Cabal-1.24.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Cabal-1.24.2.0"],
	 libraryDynDirs = ["$topdir\\Cabal-1.24.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\Cabal-1.24.2.0",
	 hsLibraries = ["HSCabal-1.24.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "pretty-1.1.3.3"),
	SimpleUnitId (ComponentId "process-1.4.3.0"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Cabal-1.24.2.0\\Cabal.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Cabal-1.24.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "Win32-2.3.1.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "Win32"},
		 pkgVersion = Version {
			versionBranch = [2,
			3,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	 compatPackageKey = "Win32-2.3.1.1",
	 license = BSD3,
	 copyright = "Alastair Reid, 1999-2003",
	 maintainer = "Haskell Libraries <libraries@haskell.org>",
	 author = "Alastair Reid",
	 stability = "",
	 homepage = "https://github.com/haskell/win32",
	 pkgUrl = "",
	 synopsis = "A binding to part of the Win32 library",
	 description = "A binding to part of the Win32 library.",
	 category = "System, Graphics",
	 abiHash = AbiHash "ccd8a5b97e0511c648a0f11110aea7f7",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Bitmap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Brush"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Clip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Font"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Graphics2D"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"HDC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Palette"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Path"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Pen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Region"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Control"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Dialogue"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Icon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Key"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Menu"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Message"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Misc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Resource"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Window"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"DebugApi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"DLL"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"File"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"FileMapping"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Info"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Mem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"NLS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Process"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Registry"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"SimpleMAPI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Time"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Console"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Security"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Shell"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1"],
	 libraryDynDirs = ["$topdir\\Win32-2.3.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\Win32-2.3.1.1",
	 hsLibraries = ["HSWin32-2.3.1.1"],
	 extraLibraries = ["user32",
	"gdi32",
	"winmm",
	"advapi32",
	"shell32",
	"shfolder"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1\\include"],
	 includes = ["HsWin32.h",
	"HsGDI.h",
	"WndProc.h"],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Win32-2.3.1.1\\Win32.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Win32-2.3.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "array-0.5.1.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "array"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "array-0.5.1.1"),
	 compatPackageKey = "array-0.5.1.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Mutable and immutable arrays",
	 description = "In addition to providing the \"Data.Array\" module\n<http://www.haskell.org/onlinereport/haskell2010/haskellch14.html as specified in the Haskell 2010 Language Report>,\nthis package also defines the classes 'IArray' of\nimmutable arrays and 'MArray' of arrays mutable within appropriate\nmonads, as well as some instances of these classes.",
	 category = "Data Structures",
	 abiHash = AbiHash "7aca2e586e45bc08b7b5511fe346ef45",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Array"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"MArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"MArray",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"ST",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Unboxed"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Unsafe"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\array-0.5.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\array-0.5.1.1"],
	 libraryDynDirs = ["$topdir\\array-0.5.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\array-0.5.1.1",
	 hsLibraries = ["HSarray-0.5.1.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/array-0.5.1.1\\array.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/array-0.5.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "base-4.9.1.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "base"},
		 pkgVersion = Version {
			versionBranch = [4,
			9,
			1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "base-4.9.1.0"),
	 compatPackageKey = "base-4.9.1.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Basic libraries",
	 description = "This package contains the \"Prelude\" and its support libraries,\nand a large collection of useful libraries ranging from data\nstructures to parsing combinators and debugging utilities.",
	 category = "Prelude",
	 abiHash = AbiHash "cc968230f890b7e806b6176b904927cc",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Arrow"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Category"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"Chan"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"MVar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"QSem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"QSemN"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Exception",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Fail"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Fix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Instances"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"IO",
		"Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Zip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bifunctor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bits"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Char"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Coerce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Complex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Data"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Dynamic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Either"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Eq"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Fixed"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Foldable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Function"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Classes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Compose"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Const"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Identity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Product"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Sum"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IORef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Int"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Kind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"List",
		"NonEmpty"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Maybe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Monoid"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ord"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Proxy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ratio"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Semigroup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"String"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Traversable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Tuple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Bool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Coercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Equality"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Typeable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Typeable",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Unique"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Version"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Void"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Word"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debug",
		"Trace"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"String"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Concurrent"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Alloc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Array"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Pool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Ptr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"StablePtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Arr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Char"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Signal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Sync"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ConsoleHandler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Desugar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Enum"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Err"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ExecutionStack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ExecutionStack",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Exts"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Fingerprint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Fingerprint",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float",
		"ConversionUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float",
		"RealFracMethods"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Foreign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ForeignPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"GHCi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Generics"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Buffer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"BufferedIO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Device"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Failure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Iconv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Latin1"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF16"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"FD"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"FD"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Text"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"IOMode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IOArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IORef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Int"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"MVar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Natural"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Num"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"OldList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"OverloadedLabels"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PArr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Pack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Profiling"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Ptr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Read"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Real"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"RTS",
		"Flags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"StaticPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"STRef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Show"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack",
		"CCS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"TopHandler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"TypeLits"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Unicode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Weak"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Word"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Numeric"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Numeric",
		"Natural"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Prelude"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"CPUTime"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Console",
		"GetOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Exit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Info"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem",
		"StableName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem",
		"Weak"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Posix",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Posix",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Timeout"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"ParserCombinators",
		"ReadP"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"ParserCombinators",
		"ReadPrec"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Printf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Read"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Read",
		"Lex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Show"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Show",
		"Functions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unsafe",
		"Coerce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage",
		"API"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage",
		"Table"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Windows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Windows"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Control",
	"Monad",
	"ST",
	"Imp"],
	ModuleName ["Control",
	"Monad",
	"ST",
	"Lazy",
	"Imp"],
	ModuleName ["Data",
	"OldList"],
	ModuleName ["Foreign",
	"ForeignPtr",
	"Imp"],
	ModuleName ["System",
	"Environment",
	"ExecutablePath"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0"],
	 libraryDynDirs = ["$topdir\\base-4.9.1.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\base-4.9.1.0",
	 hsLibraries = ["HSbase-4.9.1.0"],
	 extraLibraries = ["wsock32",
	"user32",
	"shell32",
	"msvcrt",
	"mingw32",
	"mingwex"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0\\include"],
	 includes = ["HsBase.h"],
	 depends = [SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	SimpleUnitId (ComponentId "integer-gmp-1.0.0.1"),
	SimpleUnitId (ComponentId "rts")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/base-4.9.1.0\\base.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/base-4.9.1.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "binary-0.8.3.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "binary"},
		 pkgVersion = Version {
			versionBranch = [0,
			8,
			3,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "binary-0.8.3.0"),
	 compatPackageKey = "binary-0.8.3.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "Lennart Kolmodin, Don Stewart <dons00@gmail.com>",
	 author = "Lennart Kolmodin <kolmodin@gmail.com>",
	 stability = "provisional",
	 homepage = "https://github.com/kolmodin/binary",
	 pkgUrl = "",
	 synopsis = "Binary serialisation for Haskell values using lazy ByteStrings",
	 description = "Efficient, pure binary serialisation using lazy ByteStrings.\nHaskell values may be encoded to and from binary formats,\nwritten to disk as binary, or sent over the network.\nThe format used can be automatically generated, or\nyou can choose to implement a custom format if needed.\nSerialisation speeds of over 1 G\\/sec have been observed,\nso this library should be suitable for high performance\nscenarios.",
	 category = "Data, Parsing",
	 abiHash = AbiHash "8c83205491679ed537723204034191de",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Put"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Get"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Get",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Builder"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"Binary",
	"Class"],
	ModuleName ["Data",
	"Binary",
	"Internal"],
	ModuleName ["Data",
	"Binary",
	"Generic"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\binary-0.8.3.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\binary-0.8.3.0"],
	 libraryDynDirs = ["$topdir\\binary-0.8.3.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\binary-0.8.3.0",
	 hsLibraries = ["HSbinary-0.8.3.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/binary-0.8.3.0\\binary.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/binary-0.8.3.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "bytestring"},
		 pkgVersion = Version {
			versionBranch = [0,
			10,
			8,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	 compatPackageKey = "bytestring-0.10.8.1",
	 license = BSD3,
	 copyright = "Copyright (c) Don Stewart          2005-2009,\n(c) Duncan Coutts        2006-2015,\n(c) David Roundy         2003-2005,\n(c) Jasper Van der Jeugt 2010,\n(c) Simon Meier          2010-2013.",
	 maintainer = "Duncan Coutts <duncan@community.haskell.org>",
	 author = "Don Stewart,\nDuncan Coutts",
	 stability = "",
	 homepage = "https://github.com/haskell/bytestring",
	 pkgUrl = "",
	 synopsis = "Fast, compact, strict and lazy byte strings with a list interface",
	 description = "An efficient compact, immutable byte string type (both strict and lazy)\nsuitable for binary or 8-bit character data.\n\nThe 'ByteString' type represents sequences of bytes or 8-bit characters.\nIt is suitable for high performance use, both in terms of large data\nquantities, or high speed requirements. The 'ByteString' functions follow\nthe same style as Haskell\\'s ordinary lists, so it is easy to convert code\nfrom using 'String' to 'ByteString'.\n\nTwo 'ByteString' variants are provided:\n\n* Strict 'ByteString's keep the string as a single large array. This\nmakes them convenient for passing data between C and Haskell.\n\n* Lazy 'ByteString's use a lazy list of strict chunks which makes it\nsuitable for I\\/O streaming tasks.\n\nThe @Char8@ modules provide a character-based view of the same\nunderlying 'ByteString' types. This makes it convenient to handle mixed\nbinary and 8-bit character content (which is common in many file formats\nand network protocols).\n\nThe 'Builder' module provides an efficient way to build up 'ByteString's\nin an ad-hoc way by repeated concatenation. This is ideal for fast\nserialisation or pretty printing.\n\nThere is also a 'ShortByteString' type which has a lower memory overhead\nand can can be converted to or from a 'ByteString', but supports very few\nother operations. It is suitable for keeping many short strings in memory.\n\n'ByteString's are not designed for Unicode. For Unicode strings you should\nuse the 'Text' type from the @text@ package.\n\nThese modules are intended to be imported qualified, to avoid name clashes\nwith \"Prelude\" functions, e.g.\n\n> import qualified Data.ByteString as BS",
	 category = "Data",
	 abiHash = AbiHash "7e14690886a88490b44d753007166e3d",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Char8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Char8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Short"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Short",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Extra"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Prim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Prim",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder",
		"Extras"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder",
		"ASCII"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"ByteString",
	"Builder",
	"ASCII"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Binary"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"ASCII"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"Floating"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"UncheckedShifts"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"Base16"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1"],
	 libraryDynDirs = ["$topdir\\bytestring-0.10.8.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\bytestring-0.10.8.1",
	 hsLibraries = ["HSbytestring-0.10.8.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1\\include"],
	 includes = ["fpstring.h"],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	SimpleUnitId (ComponentId "integer-gmp-1.0.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/bytestring-0.10.8.1\\bytestring.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/bytestring-0.10.8.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "containers-0.5.7.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "containers"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			7,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "containers-0.5.7.1"),
	 compatPackageKey = "containers-0.5.7.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "fox@ucw.cz",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Assorted concrete container types",
	 description = "This package contains efficient general-purpose implementations\nof various basic immutable container types.  The declared cost of\neach operation is either worst-case or amortized, but remains\nvalid even if structures are shared.",
	 category = "Data Structures",
	 abiHash = AbiHash "3111bb7604c25b20df4f36c197318fbc",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Set"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Graph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Sequence"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Tree"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"IntMap",
	"Base"],
	ModuleName ["Data",
	"IntSet",
	"Base"],
	ModuleName ["Data",
	"Map",
	"Base"],
	ModuleName ["Data",
	"Set",
	"Base"],
	ModuleName ["Data",
	"Utils",
	"BitUtil"],
	ModuleName ["Data",
	"Utils",
	"StrictFold"],
	ModuleName ["Data",
	"Utils",
	"StrictPair"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\containers-0.5.7.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\containers-0.5.7.1"],
	 libraryDynDirs = ["$topdir\\containers-0.5.7.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\containers-0.5.7.1",
	 hsLibraries = ["HScontainers-0.5.7.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/containers-0.5.7.1\\containers.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/containers-0.5.7.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "deepseq"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	 compatPackageKey = "deepseq-1.4.2.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Deep evaluation of data structures",
	 description = "This package provides methods for fully evaluating data structures\n(\\\"deep evaluation\\\"). Deep evaluation is often used for adding\nstrictness to a program, e.g. in order to force pending exceptions,\nremove space leaks, or force lazy I/O to happen. It is also useful\nin parallel programs, to ensure pending work does not migrate to the\nwrong thread.\n\nThe primary use of this package is via the 'deepseq' function, a\n\\\"deep\\\" version of 'seq'. It is implemented on top of an 'NFData'\ntypeclass (\\\"Normal Form Data\\\", data structures with no unevaluated\ncomponents) which defines strategies for fully evaluating different\ndata types.",
	 category = "Control",
	 abiHash = AbiHash "dfd2307b2812b6033b68c443295464a6",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"DeepSeq"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\deepseq-1.4.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\deepseq-1.4.2.0"],
	 libraryDynDirs = ["$topdir\\deepseq-1.4.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\deepseq-1.4.2.0",
	 hsLibraries = ["HSdeepseq-1.4.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/deepseq-1.4.2.0\\deepseq.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/deepseq-1.4.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "directory-1.3.0.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "directory"},
		 pkgVersion = Version {
			versionBranch = [1,
			3,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "directory-1.3.0.0"),
	 compatPackageKey = "directory-1.3.0.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Platform-agnostic library for filesystem operations",
	 description = "This library provides a basic set of operations for manipulating files and\ndirectories in a portable way.",
	 category = "System",
	 abiHash = AbiHash "1d37ea16f2c88221c56615fe94c9b130",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"Directory"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Directory",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Directory",
		"Internal",
		"Prelude"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["System",
	"Directory",
	"Internal",
	"Config"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"C_utimensat"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"Posix"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"Windows"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0"],
	 libraryDynDirs = ["$topdir\\directory-1.3.0.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\directory-1.3.0.0",
	 hsLibraries = ["HSdirectory-1.3.0.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/directory-1.3.0.0\\directory.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/directory-1.3.0.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "filepath-1.4.1.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "filepath"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	 compatPackageKey = "filepath-1.4.1.1",
	 license = BSD3,
	 copyright = "Neil Mitchell 2005-2016",
	 maintainer = "Neil Mitchell <ndmitchell@gmail.com>",
	 author = "Neil Mitchell <ndmitchell@gmail.com>",
	 stability = "",
	 homepage = "https://github.com/haskell/filepath#readme",
	 pkgUrl = "",
	 synopsis = "Library for manipulating FilePaths in a cross platform way.",
	 description = "This package provides functionality for manipulating @FilePath@ values, and is shipped with both <https://www.haskell.org/ghc/ GHC> and the <https://www.haskell.org/platform/ Haskell Platform>. It provides three modules:\n\n* \"System.FilePath.Posix\" manipulates POSIX\\/Linux style @FilePath@ values (with @\\/@ as the path separator).\n\n* \"System.FilePath.Windows\" manipulates Windows style @FilePath@ values (with either @\\\\@ or @\\/@ as the path separator, and deals with drives).\n\n* \"System.FilePath\" is an alias for the module appropriate to your platform.\n\nAll three modules provide the same API, and the same documentation (calling out differences in the different variants).",
	 category = "System",
	 abiHash = AbiHash "ed19db0b4a3b6c884e91517645f3f837",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath",
		"Posix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath",
		"Windows"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\filepath-1.4.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\filepath-1.4.1.1"],
	 libraryDynDirs = ["$topdir\\filepath-1.4.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\filepath-1.4.1.1",
	 hsLibraries = ["HSfilepath-1.4.1.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/filepath-1.4.1.1\\filepath.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/filepath-1.4.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "ghc-8.0.2"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-8.0.2"),
	 compatPackageKey = "ghc-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "glasgow-haskell-users@haskell.org",
	 author = "The GHC Team",
	 stability = "",
	 homepage = "http://www.haskell.org/ghc/",
	 pkgUrl = "",
	 synopsis = "The GHC API",
	 description = "GHC's functionality can be useful for more things than just\ncompiling Haskell programs. Important use cases are programs\nthat analyse (and perhaps transform) Haskell code. Others\ninclude loading Haskell code dynamically in a GHCi-like manner.\nFor this reason, a lot of GHC's functionality is made available\nthrough this package.",
	 category = "Development",
	 abiHash = AbiHash "11948038c0a9b70f8a94ff3556505012",
	 exposed = False,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Avail"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BasicTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ConLike"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DataCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PatSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Demand"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debug"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FieldLabel"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hooks"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Id"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IdInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Lexeme"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Literal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"AbsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"MetaData"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"PpLlvm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Data"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmMangler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkId"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Module"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Name"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NameEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NameSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OccName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RdrName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SrcLoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqSupply"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unique"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Var"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["VarEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["VarSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UnVarGraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BlockId"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CLabel"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Cmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmBuildInfoTables"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmPipeline"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmCallConv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmCommonBlockElim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmImplementSwitchPlans"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmContFlowOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLive"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmMachOp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmSwitch"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmNode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmParse"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmProcPoint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmSink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLayoutStack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkGraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmmDecl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Bitmap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"ARM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"ARM64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"NoRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"PPC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"PPC_Darwin"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"SPARC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"X86"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"X86_64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CgUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmBind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmClosure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmHeap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmHpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmArgRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmLayout"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmProf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmTicky"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmExtCode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SMRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreArity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreFVs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CorePrep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSubst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TrieMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreTidy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreUnfold"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSeq"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TmOracle"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Check"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Coverage"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Desugar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsArrows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsCCall"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsGRHSs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsListComp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Match"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MatchCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MatchLit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsDoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsImpExp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsLit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PlaceHolder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BinIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BuildTyCl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LoadIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FlagChecker"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Annotations"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmdLineParser"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeOutput"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Config"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverMkDepend"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverPhases"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PipelineMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverPipeline"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DynFlags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ErrUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Finder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcMake"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcPlugins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DynamicLoading"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HeaderInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscMain"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InteractiveEval"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InteractiveEvalTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PackageConfig"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Packages"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PlatformConstants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Plugins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPluginM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprTyThing"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StaticFlags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StaticPtrTable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SysTools"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Elf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TidyPgm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Ctype"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HaddockUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Lexer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OptCoercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Parser"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RdrHsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ApiAnnotation"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ForeignCall"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelRules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrimOp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TysPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TysWiredIn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CostCentre"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ProfInit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SCCfinal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnHsDoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnSource"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnSplice"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CSE"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FloatIn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FloatOut"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LiberateCase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OccurAnal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SAT"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SetLevels"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Simplify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UnariseStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Rules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SpecConstr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Specialise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreToStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CallArity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DmdAnal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["WorkWrap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["WwLib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FamInst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Inst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcAnnotations"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcArrows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcClassDcl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcDefaults"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcDeriv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcGenDeriv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcGenGenerics"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcHsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcHsType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcInstDcls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcMType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcValidity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcMatches"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPatSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnDriver"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSimplify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcErrors"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTyClsDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTyDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTypeable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcEvidence"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcUnify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcInteract"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcCanonical"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcFlatten"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTypeNats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSplice"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Coercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsMeta"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["THNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FamInstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FunDeps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TyCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoAxiom"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Kind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TyCoRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Bag"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BooleanFormula"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BufWrite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Digraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Encoding"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastFunctions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastMutInt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastStringEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Fingerprint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FiniteMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FV"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphColor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphOps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphPpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IOEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ListSetOps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Maybes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MonadUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OrdList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Outputable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Pair"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Panic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Pretty"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Stream"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StringBuffer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqDFM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqDSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqFM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Util"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins",
		"Initialise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Naming"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Local"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Global"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"InstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Closure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Hoisting"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"PADict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Poly"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"Description"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PAMethods"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PADict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PData"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Env"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"TyConDecl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Classify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Convert"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Vect"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Var"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Env"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Exp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hoopl",
		"Dataflow"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hoopl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["AsmCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TargetReg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NCGMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Instruction"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Format"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Reg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegClass"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PIC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Platform"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"RegInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"RegInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Imm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"AddrMode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Stack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"ShortcutJump"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Amode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"CondCode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Gen32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Gen64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Sanity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Expand"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Liveness"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Main"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"ArchBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"ArchX86"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Coalesce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Spill"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"SpillClean"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"SpillCost"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"TrivColorable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Main"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"JoinToTargets"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"StackMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"X86",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"X86_64",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"PPC",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"SPARC",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf",
		"Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Convert"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeAsm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeInstr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeItbls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeLink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debugger"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Linker"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RtClosureInspect"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DebuggerUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Serialized"],
		 exposedReexport = Just (OriginalModule {
			originalPackageId = SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
			 originalModuleName = ModuleName ["GHC",
			"Serialized"]})}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-8.0.2",
	 hsLibraries = ["HSghc-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	SimpleUnitId (ComponentId "ghci-8.0.2"),
	SimpleUnitId (ComponentId "hoopl-3.10.2.1"),
	SimpleUnitId (ComponentId "hpc-0.6.0.3"),
	SimpleUnitId (ComponentId "process-1.4.3.0"),
	SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	SimpleUnitId (ComponentId "time-1.6.0.1"),
	SimpleUnitId (ComponentId "transformers-0.5.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-8.0.2\\ghc.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-boot"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	 compatPackageKey = "ghc-boot-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Shared functionality between GHC and its boot libraries",
	 description = "This library is shared between GHC, ghc-pkg, and other boot\nlibraries.\n\nA note about \"GHC.PackageDb\": it only deals with the subset of\nthe package database that the compiler cares about: modules\npaths etc and not package metadata like description, authors\netc. It is thus not a library interface to ghc-pkg and is *not*\nsuitable for modifying GHC package databases.\n\nThe package database format and this library are constructed in\nsuch a way that while ghc-pkg depends on Cabal, the GHC library\nand program do not have to depend on Cabal.",
	 category = "GHC",
	 abiHash = AbiHash "0fc75597d46e8e8594985ee91cb27cea",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PackageDb"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Serialized"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-boot-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-boot-8.0.2",
	 hsLibraries = ["HSghc-boot-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-8.0.2\\ghc-boot.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-boot-th"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	 compatPackageKey = "ghc-boot-th-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Shared functionality between GHC and the @template-haskell@\nlibrary",
	 description = "This library contains various bits shared between the @ghc@ and\n@template-haskell@ libraries.\n\nThis package exists to ensure that @template-haskell@ has a\nminimal set of transitive dependencies, since it is intended to\nbe depended upon by user code.",
	 category = "GHC",
	 abiHash = AbiHash "4e1eb36abff92d3426e9d4f43b300914",
	 exposed = False,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Lexeme"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-th-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-th-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-boot-th-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-boot-th-8.0.2",
	 hsLibraries = ["HSghc-boot-th-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-th-8.0.2\\ghc-boot-th.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-th-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-prim"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	 compatPackageKey = "ghc-prim-0.5.0.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "GHC primitives",
	 description = "This package contains the primitive types and operations supplied by GHC.",
	 category = "GHC",
	 abiHash = AbiHash "5706be99cf7f0c34d17df2be5a93a4b8",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"CString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Classes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Debug"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IntWord64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Magic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PrimopWrappers"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Tuple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Prim"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-prim-0.5.0.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-prim-0.5.0.0"],
	 libraryDynDirs = ["$topdir\\ghc-prim-0.5.0.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-prim-0.5.0.0",
	 hsLibraries = ["HSghc-prim-0.5.0.0"],
	 extraLibraries = ["user32",
	"mingw32",
	"mingwex"],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "rts")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-prim-0.5.0.0\\ghc-prim.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-prim-0.5.0.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "ghci-8.0.2"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghci"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghci-8.0.2"),
	 compatPackageKey = "ghci-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "The library supporting GHC's interactive interpreter",
	 description = "This library offers interfaces which mediate interactions between the\n@ghci@ interactive shell and @iserv@, GHC's out-of-process interpreter\nbackend.",
	 category = "GHC",
	 abiHash = AbiHash "6f21b9750b724c03c938feebdad69b3b",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHCi",
		"BreakArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Message"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"ResolvedBCO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"RemoteTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"ObjLink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"CreateBCO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"FFI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"InfoTable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Run"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Signals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"TH"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"TH",
		"Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SizedSeq"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghci-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghci-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghci-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghci-8.0.2",
	 hsLibraries = ["HSghci-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	SimpleUnitId (ComponentId "transformers-0.5.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghci-8.0.2\\ghci.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghci-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxbase"},
		 pkgVersion = Version {
			versionBranch = [1,
			0,
			0,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
	 compatPackageKey = "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM",
	 license = GPL Nothing,
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 homepage = "https://github.com/metaleap/haxbase#readme",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 abiHash = AbiHash "98eb18e68e3116170c039616236e8448",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dbg"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"],
	 libraryDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 libraryDynDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 dataDir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3",
	 hsLibraries = ["HShaxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxbase-1.0.0.3\\haxbase.haddock"],
	 haddockHTMLs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxbase-1.0.0.3"],
	 pkgRoot = Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d"}),
(SimpleUnitId (ComponentId "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxpile"},
		 pkgVersion = Version {
			versionBranch = [0,
			1,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"),
	 compatPackageKey = "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG",
	 license = GPL Nothing,
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 homepage = "https://github.com/metaleap/haxpile",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 abiHash = AbiHash "4ecb869109724bf01250b9477ee53f48",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Via",
		"CabalSetup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Via",
		"Frontend"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"ADT"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"ES"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"],
	 libraryDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 libraryDynDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 dataDir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0",
	 hsLibraries = ["HShaxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Cabal-1.24.2.0"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-8.0.2"),
	SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
	SimpleUnitId (ComponentId "process-1.4.3.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-0.1.0.0\\haxpile.haddock"],
	 haddockHTMLs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-0.1.0.0"],
	 pkgRoot = Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d"}),
(SimpleUnitId (ComponentId "hoopl-3.10.2.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "hoopl"},
		 pkgVersion = Version {
			versionBranch = [3,
			10,
			2,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "hoopl-3.10.2.1"),
	 compatPackageKey = "hoopl-3.10.2.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "nr@cs.tufts.edu, andreas.voellmy@gmail.com, email@ningwang.org",
	 author = "Norman Ramsey, Joao Dias, Simon Marlow and Simon Peyton Jones",
	 stability = "",
	 homepage = "http://ghc.cs.tufts.edu/hoopl/",
	 pkgUrl = "",
	 synopsis = "A library to support dataflow analysis and optimization",
	 description = "Higher-order optimization library\n\nSee /Norman Ramsey, Joao Dias, and Simon Peyton Jones./\n<http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf \"Hoopl: A Modular, Reusable Library for Dataflow Analysis and Transformation\"> /(2010)/ for more details.",
	 category = "Compilers/Interpreters",
	 abiHash = AbiHash "4ae02921e41b8daf8c71d245874a8ce7",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Wrappers"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Passes",
		"Dominator"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Passes",
		"DList"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Compiler",
	"Hoopl",
	"Checkpoint"],
	ModuleName ["Compiler",
	"Hoopl",
	"Collections"],
	ModuleName ["Compiler",
	"Hoopl",
	"Combinators"],
	ModuleName ["Compiler",
	"Hoopl",
	"Dataflow"],
	ModuleName ["Compiler",
	"Hoopl",
	"Debug"],
	ModuleName ["Compiler",
	"Hoopl",
	"Block"],
	ModuleName ["Compiler",
	"Hoopl",
	"Graph"],
	ModuleName ["Compiler",
	"Hoopl",
	"Label"],
	ModuleName ["Compiler",
	"Hoopl",
	"MkGraph"],
	ModuleName ["Compiler",
	"Hoopl",
	"Fuel"],
	ModuleName ["Compiler",
	"Hoopl",
	"Pointed"],
	ModuleName ["Compiler",
	"Hoopl",
	"Shape"],
	ModuleName ["Compiler",
	"Hoopl",
	"Show"],
	ModuleName ["Compiler",
	"Hoopl",
	"Unique"],
	ModuleName ["Compiler",
	"Hoopl",
	"XUtil"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hoopl-3.10.2.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hoopl-3.10.2.1"],
	 libraryDynDirs = ["$topdir\\hoopl-3.10.2.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\hoopl-3.10.2.1",
	 hsLibraries = ["HShoopl-3.10.2.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "containers-0.5.7.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hoopl-3.10.2.1\\hoopl.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hoopl-3.10.2.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "hpc-0.6.0.3"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "hpc"},
		 pkgVersion = Version {
			versionBranch = [0,
			6,
			0,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "hpc-0.6.0.3"),
	 compatPackageKey = "hpc-0.6.0.3",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "Andy Gill",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Code Coverage Library for Haskell",
	 description = "This package provides the code coverage library for Haskell.\n\nSee <http://www.haskell.org/haskellwiki/Haskell_program_coverage> for more\ninformation.",
	 category = "Control",
	 abiHash = AbiHash "b2cb7d8ff2610d738da2506af95cfd06",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Util"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Mix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Tix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Reflect"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hpc-0.6.0.3"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hpc-0.6.0.3"],
	 libraryDynDirs = ["$topdir\\hpc-0.6.0.3"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\hpc-0.6.0.3",
	 hsLibraries = ["HShpc-0.6.0.3"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hpc-0.6.0.3\\hpc.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hpc-0.6.0.3"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "integer-gmp-1.0.0.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "integer-gmp"},
		 pkgVersion = Version {
			versionBranch = [1,
			0,
			0,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "integer-gmp-1.0.0.1"),
	 compatPackageKey = "integer-gmp-1.0.0.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "hvr@gnu.org",
	 author = "Herbert Valerio Riedel",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Integer library based on GMP",
	 description = "",
	 category = "Numeric, Algebra",
	 abiHash = AbiHash "27b59801da8c5958521b8c39b2008a76",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"Logarithms"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"Logarithms",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"GMP",
		"Internals"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["GHC",
	"Integer",
	"Type"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1"],
	 libraryDynDirs = ["$topdir\\integer-gmp-1.0.0.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\integer-gmp-1.0.0.1",
	 hsLibraries = ["HSinteger-gmp-1.0.0.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/integer-gmp-1.0.0.1\\integer-gmp.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/integer-gmp-1.0.0.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "pretty-1.1.3.3"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "pretty"},
		 pkgVersion = Version {
			versionBranch = [1,
			1,
			3,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "pretty-1.1.3.3"),
	 compatPackageKey = "pretty-1.1.3.3",
	 license = BSD3,
	 copyright = "",
	 maintainer = "David Terei <code@davidterei.com>",
	 author = "",
	 stability = "Stable",
	 homepage = "http://github.com/haskell/pretty",
	 pkgUrl = "",
	 synopsis = "Pretty-printing library",
	 description = "This package contains a pretty-printing library, a set of API's\nthat provides a way to easily print out text in a consistent\nformat of your choosing. This is useful for compilers and related\ntools.\n\nThis library was originally designed by John Hughes's and has since\nbeen heavily modified by Simon Peyton Jones.",
	 category = "Text",
	 abiHash = AbiHash "4afce9837895e3da781eb72b7c392147",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"HughesPJ"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"HughesPJClass"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated",
		"HughesPJ"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated",
		"HughesPJClass"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\pretty-1.1.3.3"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\pretty-1.1.3.3"],
	 libraryDynDirs = ["$topdir\\pretty-1.1.3.3"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\pretty-1.1.3.3",
	 hsLibraries = ["HSpretty-1.1.3.3"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/pretty-1.1.3.3\\pretty.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/pretty-1.1.3.3"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "process-1.4.3.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "process"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			3,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "process-1.4.3.0"),
	 compatPackageKey = "process-1.4.3.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Process libraries",
	 description = "This package contains libraries for dealing with system processes.",
	 category = "System",
	 abiHash = AbiHash "4a7c4457205fbe5c573896dea8d32178",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"Cmd"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Process"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Process",
		"Internals"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["System",
	"Process",
	"Common"],
	ModuleName ["System",
	"Process",
	"Windows"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0"],
	 libraryDynDirs = ["$topdir\\process-1.4.3.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\process-1.4.3.0",
	 hsLibraries = ["HSprocess-1.4.3.0"],
	 extraLibraries = ["kernel32"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0\\include"],
	 includes = ["runProcess.h"],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/process-1.4.3.0\\process.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/process-1.4.3.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "rts"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "rts"},
		 pkgVersion = Version {
			versionBranch = [1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "rts"),
	 compatPackageKey = "rts",
	 license = BSD3,
	 copyright = "",
	 maintainer = "glasgow-haskell-users@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "",
	 abiHash = AbiHash "",
	 exposed = True,
	 exposedModules = [],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = [],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/rts"],
	 libraryDynDirs = [],
	 dataDir = "",
	 hsLibraries = ["HSrts",
	"Cffi-6"],
	 extraLibraries = ["m",
	"wsock32",
	"gdi32",
	"winmm",
	"pthread"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/include"],
	 includes = ["Stg.h"],
	 depends = [],
	 ccOptions = [],
	 ldOptions = ["-Wl,-u,ghczmprim_GHCziTypes_Izh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Czh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Fzh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Dzh_static_info",
	"-Wl,-u,base_GHCziPtr_Ptr_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Wzh_static_info",
	"-Wl,-u,base_GHCziInt_I8zh_static_info",
	"-Wl,-u,base_GHCziInt_I16zh_static_info",
	"-Wl,-u,base_GHCziInt_I32zh_static_info",
	"-Wl,-u,base_GHCziInt_I64zh_static_info",
	"-Wl,-u,base_GHCziWord_W8zh_static_info",
	"-Wl,-u,base_GHCziWord_W16zh_static_info",
	"-Wl,-u,base_GHCziWord_W32zh_static_info",
	"-Wl,-u,base_GHCziWord_W64zh_static_info",
	"-Wl,-u,base_GHCziStable_StablePtr_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Izh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Czh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Fzh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Dzh_con_info",
	"-Wl,-u,base_GHCziPtr_Ptr_con_info",
	"-Wl,-u,base_GHCziPtr_FunPtr_con_info",
	"-Wl,-u,base_GHCziStable_StablePtr_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_False_closure",
	"-Wl,-u,ghczmprim_GHCziTypes_True_closure",
	"-Wl,-u,base_GHCziPack_unpackCString_closure",
	"-Wl,-u,base_GHCziIOziException_stackOverflow_closure",
	"-Wl,-u,base_GHCziIOziException_heapOverflow_closure",
	"-Wl,-u,base_ControlziExceptionziBase_nonTermination_closure",
	"-Wl,-u,base_GHCziIOziException_blockedIndefinitelyOnMVar_closure",
	"-Wl,-u,base_GHCziIOziException_blockedIndefinitelyOnSTM_closure",
	"-Wl,-u,base_GHCziIOziException_allocationLimitExceeded_closure",
	"-Wl,-u,base_ControlziExceptionziBase_nestedAtomically_closure",
	"-Wl,-u,base_GHCziEventziThread_blockedOnBadFD_closure",
	"-Wl,-u,base_GHCziWeak_runFinalizzerBatch_closure",
	"-Wl,-u,base_GHCziTopHandler_flushStdHandles_closure",
	"-Wl,-u,base_GHCziTopHandler_runIO_closure",
	"-Wl,-u,base_GHCziTopHandler_runNonIO_closure",
	"-Wl,-u,base_GHCziConcziIO_ensureIOManagerIsRunning_closure",
	"-Wl,-u,base_GHCziConcziIO_ioManagerCapabilitiesChanged_closure",
	"-Wl,-u,base_GHCziConcziSync_runSparks_closure",
	"-Wl,-u,base_GHCziConcziSignal_runHandlersPtr_closure"],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = [],
	 haddockHTMLs = [],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "template-haskell"},
		 pkgVersion = Version {
			versionBranch = [2,
			11,
			1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	 compatPackageKey = "template-haskell-2.11.1.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Support library for Template Haskell",
	 description = "This package provides modules containing facilities for manipulating\nHaskell source code using Template Haskell.\n\nSee <http://www.haskell.org/haskellwiki/Template_Haskell> for more\ninformation.",
	 category = "Template Haskell",
	 abiHash = AbiHash "526a1de7b3f9048e8d3908ee8174f433",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Lib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"PprLib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Quote"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Syntax"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"LanguageExtensions"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Language",
	"Haskell",
	"TH",
	"Lib",
	"Map"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\template-haskell-2.11.1.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\template-haskell-2.11.1.0"],
	 libraryDynDirs = ["$topdir\\template-haskell-2.11.1.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\template-haskell-2.11.1.0",
	 hsLibraries = ["HStemplate-haskell-2.11.1.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	SimpleUnitId (ComponentId "pretty-1.1.3.3")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/template-haskell-2.11.1.0\\template-haskell.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/template-haskell-2.11.1.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "time-1.6.0.1"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "time"},
		 pkgVersion = Version {
			versionBranch = [1,
			6,
			0,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "time-1.6.0.1"),
	 compatPackageKey = "time-1.6.0.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "<ashley@semantic.org>",
	 author = "Ashley Yakeley",
	 stability = "stable",
	 homepage = "https://github.com/haskell/time",
	 pkgUrl = "",
	 synopsis = "A time library",
	 description = "A time library",
	 category = "System",
	 abiHash = AbiHash "21731b74b30cba4f439003962ded663f",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"MonthDay"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"OrdinalDate"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"WeekDate"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"Julian"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"Easter"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock",
		"POSIX"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock",
		"TAI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"LocalTime"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Format"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"Time",
	"Calendar",
	"Private"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"Days"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"Gregorian"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"JulianYearDay"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"Scale"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"UTC"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"CTimeval"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"CTimespec"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"UTCDiff"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"TimeZone"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"TimeOfDay"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"LocalTime"],
	ModuleName ["Data",
	"Time",
	"Format",
	"Parse"],
	ModuleName ["Data",
	"Time",
	"Format",
	"Locale"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1"],
	 libraryDynDirs = ["$topdir\\time-1.6.0.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\time-1.6.0.1",
	 hsLibraries = ["HStime-1.6.0.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/time-1.6.0.1\\time.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/time-1.6.0.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}),
(SimpleUnitId (ComponentId "transformers-0.5.2.0"),
InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "transformers"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "transformers-0.5.2.0"),
	 compatPackageKey = "transformers-0.5.2.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "Ross Paterson <R.Paterson@city.ac.uk>",
	 author = "Andy Gill, Ross Paterson",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Concrete functor and monad transformers",
	 description = "A portable library of functor and monad transformers, inspired by\nthe paper \\\"Functional Programming with Overloading and Higher-Order\nPolymorphism\\\", by Mark P Jones,\nin /Advanced School of Functional Programming/, 1995\n(<http://web.cecs.pdx.edu/~mpj/pubs/springschool.html>).\n\nThis package contains:\n\n* the monad transformer class (in \"Control.Monad.Trans.Class\")\nand IO monad class (in \"Control.Monad.IO.Class\")\n\n* concrete functor and monad transformers, each with associated\noperations and functions to lift operations associated with other\ntransformers.\n\nThe package can be used on its own in portable Haskell code, in\nwhich case operations need to be manually lifted through transformer\nstacks (see \"Control.Monad.Trans.Class\" for some examples).\nAlternatively, it can be used with the non-portable monad classes in\nthe @mtl@ or @monads-tf@ packages, which automatically lift operations\nintroduced by monad transformers through other transformers.",
	 category = "Control",
	 abiHash = AbiHash "b1116afc60a191b846453e1878035514",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative",
		"Backwards"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative",
		"Lift"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Signatures"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Cont"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Except"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Identity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Maybe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Reader"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Constant"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Reverse"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\transformers-0.5.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\transformers-0.5.2.0"],
	 libraryDynDirs = ["$topdir\\transformers-0.5.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\transformers-0.5.2.0",
	 hsLibraries = ["HStransformers-0.5.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/transformers-0.5.2.0\\transformers.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/transformers-0.5.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"})]) (fromList [(PackageName {
	unPackageName = "Cabal"},
fromList [(Version {
	versionBranch = [1,
	24,
	2,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "Cabal"},
		 pkgVersion = Version {
			versionBranch = [1,
			24,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "Cabal-1.24.2.0"),
	 compatPackageKey = "Cabal-1.24.2.0",
	 license = BSD3,
	 copyright = "2003-2006, Isaac Jones\n2005-2011, Duncan Coutts",
	 maintainer = "cabal-devel@haskell.org",
	 author = "Isaac Jones <ijones@syntaxpolice.org>\nDuncan Coutts <duncan@community.haskell.org>",
	 stability = "",
	 homepage = "http://www.haskell.org/cabal/",
	 pkgUrl = "",
	 synopsis = "A framework for packaging Haskell software",
	 description = "The Haskell Common Architecture for Building Applications and\nLibraries: a framework defining a common interface for authors to more\neasily build their Haskell applications in a portable way.\n\nThe Haskell Cabal is part of a larger infrastructure for distributing,\norganizing, and cataloging Haskell libraries and tools.",
	 category = "Distribution",
	 abiHash = AbiHash "3792a773b2c9ae9469e35e74cdb369a9",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"CreatePipe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Internal",
		"TempFile"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"ReadP"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Semigroup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"InstalledPackageInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"License"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Make"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ModuleName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Package"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Check"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Configuration"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Parse"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"PrettyPrint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"PackageDescription",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ParseUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"ReadE"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Bench"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build",
		"Macros"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Build",
		"PathsModule"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"BuildPaths"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"BuildTarget"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"CCompiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Command"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Compiler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Configure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"GHCJS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Haddock"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"HaskellSuite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Hpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Install"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"InstallDirs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"JHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"LHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"LocalBuildInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PackageIndex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PreProcess"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"PreProcess",
		"Unlit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Ar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Builtin"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Db"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Find"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"HcPkg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Hpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Ld"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Run"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Script"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Strip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Program",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Register"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Setup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"SrcDist"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"ExeV10"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"LibV09"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Test",
		"Log"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"UHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"UserHooks"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Simple",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"System"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"TestSuite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Text"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Utils",
		"NubList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Verbosity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Version"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"Extension"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Distribution",
		"Compat",
		"Binary"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Distribution",
	"Compat",
	"CopyFile"],
	ModuleName ["Distribution",
	"Compat",
	"GetShortPathName"],
	ModuleName ["Distribution",
	"Compat",
	"MonadFail"],
	ModuleName ["Distribution",
	"GetOpt"],
	ModuleName ["Distribution",
	"Lex"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"Internal"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"IPI642"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"IPIConvert"],
	ModuleName ["Distribution",
	"Simple",
	"GHC",
	"ImplInfo"],
	ModuleName ["Paths_Cabal"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Cabal-1.24.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Cabal-1.24.2.0"],
	 libraryDynDirs = ["$topdir\\Cabal-1.24.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\Cabal-1.24.2.0",
	 hsLibraries = ["HSCabal-1.24.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "pretty-1.1.3.3"),
	SimpleUnitId (ComponentId "process-1.4.3.0"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Cabal-1.24.2.0\\Cabal.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Cabal-1.24.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "Win32"},
fromList [(Version {
	versionBranch = [2,
	3,
	1,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "Win32"},
		 pkgVersion = Version {
			versionBranch = [2,
			3,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	 compatPackageKey = "Win32-2.3.1.1",
	 license = BSD3,
	 copyright = "Alastair Reid, 1999-2003",
	 maintainer = "Haskell Libraries <libraries@haskell.org>",
	 author = "Alastair Reid",
	 stability = "",
	 homepage = "https://github.com/haskell/win32",
	 pkgUrl = "",
	 synopsis = "A binding to part of the Win32 library",
	 description = "A binding to part of the Win32 library.",
	 category = "System, Graphics",
	 abiHash = AbiHash "ccd8a5b97e0511c648a0f11110aea7f7",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Bitmap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Brush"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Clip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Font"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Graphics2D"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"HDC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Palette"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Path"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Pen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Region"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"GDI",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Control"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Dialogue"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Icon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Key"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Menu"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Message"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Misc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Resource"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Graphics",
		"Win32",
		"Window"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"DebugApi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"DLL"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"File"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"FileMapping"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Info"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Mem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"NLS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Process"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Registry"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"SimpleMAPI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Time"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Console"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Security"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Win32",
		"Shell"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1"],
	 libraryDynDirs = ["$topdir\\Win32-2.3.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\Win32-2.3.1.1",
	 hsLibraries = ["HSWin32-2.3.1.1"],
	 extraLibraries = ["user32",
	"gdi32",
	"winmm",
	"advapi32",
	"shell32",
	"shfolder"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\Win32-2.3.1.1\\include"],
	 includes = ["HsWin32.h",
	"HsGDI.h",
	"WndProc.h"],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Win32-2.3.1.1\\Win32.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/Win32-2.3.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "array"},
fromList [(Version {
	versionBranch = [0,
	5,
	1,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "array"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "array-0.5.1.1"),
	 compatPackageKey = "array-0.5.1.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Mutable and immutable arrays",
	 description = "In addition to providing the \"Data.Array\" module\n<http://www.haskell.org/onlinereport/haskell2010/haskellch14.html as specified in the Haskell 2010 Language Report>,\nthis package also defines the classes 'IArray' of\nimmutable arrays and 'MArray' of arrays mutable within appropriate\nmonads, as well as some instances of these classes.",
	 category = "Data Structures",
	 abiHash = AbiHash "7aca2e586e45bc08b7b5511fe346ef45",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Array"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"IO",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"MArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"MArray",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"ST",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Storable",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Unboxed"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Array",
		"Unsafe"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\array-0.5.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\array-0.5.1.1"],
	 libraryDynDirs = ["$topdir\\array-0.5.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\array-0.5.1.1",
	 hsLibraries = ["HSarray-0.5.1.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/array-0.5.1.1\\array.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/array-0.5.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "base"},
fromList [(Version {
	versionBranch = [4,
	9,
	1,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "base"},
		 pkgVersion = Version {
			versionBranch = [4,
			9,
			1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "base-4.9.1.0"),
	 compatPackageKey = "base-4.9.1.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Basic libraries",
	 description = "This package contains the \"Prelude\" and its support libraries,\nand a large collection of useful libraries ranging from data\nstructures to parsing combinators and debugging utilities.",
	 category = "Prelude",
	 abiHash = AbiHash "cc968230f890b7e806b6176b904927cc",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Arrow"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Category"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"Chan"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"MVar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"QSem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Concurrent",
		"QSemN"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Exception",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Fail"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Fix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Instances"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"IO",
		"Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Lazy",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"ST",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Zip"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bifunctor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bits"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Bool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Char"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Coerce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Complex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Data"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Dynamic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Either"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Eq"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Fixed"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Foldable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Function"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Classes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Compose"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Const"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Identity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Product"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Sum"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IORef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Int"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Kind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"List",
		"NonEmpty"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Maybe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Monoid"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ord"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Proxy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Ratio"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Semigroup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"STRef",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"String"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Traversable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Tuple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Bool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Coercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Type",
		"Equality"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Typeable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Typeable",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Unique"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Version"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Void"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Word"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debug",
		"Trace"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"String"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"C",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Concurrent"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"ForeignPtr",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Alloc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Array"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Pool"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Marshal",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Ptr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Safe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"StablePtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Foreign",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Arr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Char"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Signal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Sync"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ConsoleHandler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Desugar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Enum"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Err"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ExecutionStack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ExecutionStack",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Exts"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Fingerprint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Fingerprint",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float",
		"ConversionUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Float",
		"RealFracMethods"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Foreign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ForeignPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"GHCi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Generics"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Buffer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"BufferedIO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Device"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Failure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Iconv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Latin1"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF16"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"UTF8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"FD"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"FD"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Text"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Handle",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"IOMode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IOArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IORef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Int"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"MVar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Natural"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Num"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"OldList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"OverloadedLabels"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PArr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Pack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Profiling"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Ptr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Read"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Real"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"RTS",
		"Flags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"ST"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"StaticPtr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"STRef"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Show"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack",
		"CCS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stack",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Storable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"TopHandler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"TypeLits"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Unicode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Weak"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Word"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Numeric"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Numeric",
		"Natural"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Prelude"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"CPUTime"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Console",
		"GetOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Environment"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Exit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"IO",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Info"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem",
		"StableName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Mem",
		"Weak"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Posix",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Posix",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Timeout"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"ParserCombinators",
		"ReadP"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"ParserCombinators",
		"ReadPrec"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Printf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Read"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Read",
		"Lex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Show"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"Show",
		"Functions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unsafe",
		"Coerce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage",
		"API"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IO",
		"Encoding",
		"CodePage",
		"Table"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Conc",
		"Windows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Windows"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Control",
	"Monad",
	"ST",
	"Imp"],
	ModuleName ["Control",
	"Monad",
	"ST",
	"Lazy",
	"Imp"],
	ModuleName ["Data",
	"OldList"],
	ModuleName ["Foreign",
	"ForeignPtr",
	"Imp"],
	ModuleName ["System",
	"Environment",
	"ExecutablePath"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0"],
	 libraryDynDirs = ["$topdir\\base-4.9.1.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\base-4.9.1.0",
	 hsLibraries = ["HSbase-4.9.1.0"],
	 extraLibraries = ["wsock32",
	"user32",
	"shell32",
	"msvcrt",
	"mingw32",
	"mingwex"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\base-4.9.1.0\\include"],
	 includes = ["HsBase.h"],
	 depends = [SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	SimpleUnitId (ComponentId "integer-gmp-1.0.0.1"),
	SimpleUnitId (ComponentId "rts")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/base-4.9.1.0\\base.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/base-4.9.1.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "binary"},
fromList [(Version {
	versionBranch = [0,
	8,
	3,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "binary"},
		 pkgVersion = Version {
			versionBranch = [0,
			8,
			3,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "binary-0.8.3.0"),
	 compatPackageKey = "binary-0.8.3.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "Lennart Kolmodin, Don Stewart <dons00@gmail.com>",
	 author = "Lennart Kolmodin <kolmodin@gmail.com>",
	 stability = "provisional",
	 homepage = "https://github.com/kolmodin/binary",
	 pkgUrl = "",
	 synopsis = "Binary serialisation for Haskell values using lazy ByteStrings",
	 description = "Efficient, pure binary serialisation using lazy ByteStrings.\nHaskell values may be encoded to and from binary formats,\nwritten to disk as binary, or sent over the network.\nThe format used can be automatically generated, or\nyou can choose to implement a custom format if needed.\nSerialisation speeds of over 1 G\\/sec have been observed,\nso this library should be suitable for high performance\nscenarios.",
	 category = "Data, Parsing",
	 abiHash = AbiHash "8c83205491679ed537723204034191de",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Put"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Get"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Get",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Binary",
		"Builder"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"Binary",
	"Class"],
	ModuleName ["Data",
	"Binary",
	"Internal"],
	ModuleName ["Data",
	"Binary",
	"Generic"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\binary-0.8.3.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\binary-0.8.3.0"],
	 libraryDynDirs = ["$topdir\\binary-0.8.3.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\binary-0.8.3.0",
	 hsLibraries = ["HSbinary-0.8.3.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/binary-0.8.3.0\\binary.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/binary-0.8.3.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "bytestring"},
fromList [(Version {
	versionBranch = [0,
	10,
	8,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "bytestring"},
		 pkgVersion = Version {
			versionBranch = [0,
			10,
			8,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	 compatPackageKey = "bytestring-0.10.8.1",
	 license = BSD3,
	 copyright = "Copyright (c) Don Stewart          2005-2009,\n(c) Duncan Coutts        2006-2015,\n(c) David Roundy         2003-2005,\n(c) Jasper Van der Jeugt 2010,\n(c) Simon Meier          2010-2013.",
	 maintainer = "Duncan Coutts <duncan@community.haskell.org>",
	 author = "Don Stewart,\nDuncan Coutts",
	 stability = "",
	 homepage = "https://github.com/haskell/bytestring",
	 pkgUrl = "",
	 synopsis = "Fast, compact, strict and lazy byte strings with a list interface",
	 description = "An efficient compact, immutable byte string type (both strict and lazy)\nsuitable for binary or 8-bit character data.\n\nThe 'ByteString' type represents sequences of bytes or 8-bit characters.\nIt is suitable for high performance use, both in terms of large data\nquantities, or high speed requirements. The 'ByteString' functions follow\nthe same style as Haskell\\'s ordinary lists, so it is easy to convert code\nfrom using 'String' to 'ByteString'.\n\nTwo 'ByteString' variants are provided:\n\n* Strict 'ByteString's keep the string as a single large array. This\nmakes them convenient for passing data between C and Haskell.\n\n* Lazy 'ByteString's use a lazy list of strict chunks which makes it\nsuitable for I\\/O streaming tasks.\n\nThe @Char8@ modules provide a character-based view of the same\nunderlying 'ByteString' types. This makes it convenient to handle mixed\nbinary and 8-bit character content (which is common in many file formats\nand network protocols).\n\nThe 'Builder' module provides an efficient way to build up 'ByteString's\nin an ad-hoc way by repeated concatenation. This is ideal for fast\nserialisation or pretty printing.\n\nThere is also a 'ShortByteString' type which has a lower memory overhead\nand can can be converted to or from a 'ByteString', but supports very few\nother operations. It is suitable for keeping many short strings in memory.\n\n'ByteString's are not designed for Unicode. For Unicode strings you should\nuse the 'Text' type from the @text@ package.\n\nThese modules are intended to be imported qualified, to avoid name clashes\nwith \"Prelude\" functions, e.g.\n\n> import qualified Data.ByteString as BS",
	 category = "Data",
	 abiHash = AbiHash "7e14690886a88490b44d753007166e3d",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Char8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Unsafe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Char8"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Short"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Short",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Extra"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Prim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Builder",
		"Prim",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder",
		"Extras"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"ByteString",
		"Lazy",
		"Builder",
		"ASCII"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"ByteString",
	"Builder",
	"ASCII"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Binary"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"ASCII"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"Floating"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"UncheckedShifts"],
	ModuleName ["Data",
	"ByteString",
	"Builder",
	"Prim",
	"Internal",
	"Base16"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1"],
	 libraryDynDirs = ["$topdir\\bytestring-0.10.8.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\bytestring-0.10.8.1",
	 hsLibraries = ["HSbytestring-0.10.8.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\bytestring-0.10.8.1\\include"],
	 includes = ["fpstring.h"],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	SimpleUnitId (ComponentId "integer-gmp-1.0.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/bytestring-0.10.8.1\\bytestring.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/bytestring-0.10.8.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "containers"},
fromList [(Version {
	versionBranch = [0,
	5,
	7,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "containers"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			7,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "containers-0.5.7.1"),
	 compatPackageKey = "containers-0.5.7.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "fox@ucw.cz",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Assorted concrete container types",
	 description = "This package contains efficient general-purpose implementations\nof various basic immutable container types.  The declared cost of\neach operation is either worst-case or amortized, but remains\nvalid even if structures are shared.",
	 category = "Data Structures",
	 abiHash = AbiHash "3111bb7604c25b20df4f36c197318fbc",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntMap",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"IntSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Map",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Set"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Graph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Sequence"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Tree"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"IntMap",
	"Base"],
	ModuleName ["Data",
	"IntSet",
	"Base"],
	ModuleName ["Data",
	"Map",
	"Base"],
	ModuleName ["Data",
	"Set",
	"Base"],
	ModuleName ["Data",
	"Utils",
	"BitUtil"],
	ModuleName ["Data",
	"Utils",
	"StrictFold"],
	ModuleName ["Data",
	"Utils",
	"StrictPair"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\containers-0.5.7.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\containers-0.5.7.1"],
	 libraryDynDirs = ["$topdir\\containers-0.5.7.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\containers-0.5.7.1",
	 hsLibraries = ["HScontainers-0.5.7.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/containers-0.5.7.1\\containers.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/containers-0.5.7.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "deepseq"},
fromList [(Version {
	versionBranch = [1,
	4,
	2,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "deepseq"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	 compatPackageKey = "deepseq-1.4.2.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Deep evaluation of data structures",
	 description = "This package provides methods for fully evaluating data structures\n(\\\"deep evaluation\\\"). Deep evaluation is often used for adding\nstrictness to a program, e.g. in order to force pending exceptions,\nremove space leaks, or force lazy I/O to happen. It is also useful\nin parallel programs, to ensure pending work does not migrate to the\nwrong thread.\n\nThe primary use of this package is via the 'deepseq' function, a\n\\\"deep\\\" version of 'seq'. It is implemented on top of an 'NFData'\ntypeclass (\\\"Normal Form Data\\\", data structures with no unevaluated\ncomponents) which defines strategies for fully evaluating different\ndata types.",
	 category = "Control",
	 abiHash = AbiHash "dfd2307b2812b6033b68c443295464a6",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"DeepSeq"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\deepseq-1.4.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\deepseq-1.4.2.0"],
	 libraryDynDirs = ["$topdir\\deepseq-1.4.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\deepseq-1.4.2.0",
	 hsLibraries = ["HSdeepseq-1.4.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/deepseq-1.4.2.0\\deepseq.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/deepseq-1.4.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "directory"},
fromList [(Version {
	versionBranch = [1,
	3,
	0,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "directory"},
		 pkgVersion = Version {
			versionBranch = [1,
			3,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "directory-1.3.0.0"),
	 compatPackageKey = "directory-1.3.0.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Platform-agnostic library for filesystem operations",
	 description = "This library provides a basic set of operations for manipulating files and\ndirectories in a portable way.",
	 category = "System",
	 abiHash = AbiHash "1d37ea16f2c88221c56615fe94c9b130",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"Directory"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Directory",
		"Internal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Directory",
		"Internal",
		"Prelude"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["System",
	"Directory",
	"Internal",
	"Config"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"C_utimensat"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"Posix"],
	ModuleName ["System",
	"Directory",
	"Internal",
	"Windows"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0"],
	 libraryDynDirs = ["$topdir\\directory-1.3.0.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\directory-1.3.0.0",
	 hsLibraries = ["HSdirectory-1.3.0.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\directory-1.3.0.0\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/directory-1.3.0.0\\directory.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/directory-1.3.0.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "filepath"},
fromList [(Version {
	versionBranch = [1,
	4,
	1,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "filepath"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			1,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	 compatPackageKey = "filepath-1.4.1.1",
	 license = BSD3,
	 copyright = "Neil Mitchell 2005-2016",
	 maintainer = "Neil Mitchell <ndmitchell@gmail.com>",
	 author = "Neil Mitchell <ndmitchell@gmail.com>",
	 stability = "",
	 homepage = "https://github.com/haskell/filepath#readme",
	 pkgUrl = "",
	 synopsis = "Library for manipulating FilePaths in a cross platform way.",
	 description = "This package provides functionality for manipulating @FilePath@ values, and is shipped with both <https://www.haskell.org/ghc/ GHC> and the <https://www.haskell.org/platform/ Haskell Platform>. It provides three modules:\n\n* \"System.FilePath.Posix\" manipulates POSIX\\/Linux style @FilePath@ values (with @\\/@ as the path separator).\n\n* \"System.FilePath.Windows\" manipulates Windows style @FilePath@ values (with either @\\\\@ or @\\/@ as the path separator, and deals with drives).\n\n* \"System.FilePath\" is an alias for the module appropriate to your platform.\n\nAll three modules provide the same API, and the same documentation (calling out differences in the different variants).",
	 category = "System",
	 abiHash = AbiHash "ed19db0b4a3b6c884e91517645f3f837",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath",
		"Posix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"FilePath",
		"Windows"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\filepath-1.4.1.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\filepath-1.4.1.1"],
	 libraryDynDirs = ["$topdir\\filepath-1.4.1.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\filepath-1.4.1.1",
	 hsLibraries = ["HSfilepath-1.4.1.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/filepath-1.4.1.1\\filepath.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/filepath-1.4.1.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "ghc"},
fromList [(Version {
	versionBranch = [8,
	0,
	2],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-8.0.2"),
	 compatPackageKey = "ghc-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "glasgow-haskell-users@haskell.org",
	 author = "The GHC Team",
	 stability = "",
	 homepage = "http://www.haskell.org/ghc/",
	 pkgUrl = "",
	 synopsis = "The GHC API",
	 description = "GHC's functionality can be useful for more things than just\ncompiling Haskell programs. Important use cases are programs\nthat analyse (and perhaps transform) Haskell code. Others\ninclude loading Haskell code dynamically in a GHCi-like manner.\nFor this reason, a lot of GHC's functionality is made available\nthrough this package.",
	 category = "Development",
	 abiHash = AbiHash "11948038c0a9b70f8a94ff3556505012",
	 exposed = False,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Avail"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BasicTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ConLike"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DataCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PatSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Demand"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debug"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Exception"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FieldLabel"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hooks"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Id"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IdInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Lexeme"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Literal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"AbsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"MetaData"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"PpLlvm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Llvm",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Data"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmCodeGen",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LlvmMangler"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkId"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Module"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Name"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NameEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NameSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OccName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RdrName"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SrcLoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqSupply"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unique"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Var"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["VarEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["VarSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UnVarGraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BlockId"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CLabel"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Cmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmBuildInfoTables"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmPipeline"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmCallConv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmCommonBlockElim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmImplementSwitchPlans"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmContFlowOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLex"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLive"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmMachOp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmSwitch"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmNode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmOpt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmParse"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmProcPoint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmSink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmmLayoutStack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkGraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmmDecl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Bitmap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"ARM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"ARM64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"NoRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"PPC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"PPC_Darwin"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"SPARC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"X86"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeGen",
		"Platform",
		"X86_64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CgUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmBind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmClosure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmHeap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmHpc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmArgRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmLayout"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmProf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmTicky"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgCmmExtCode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SMRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreArity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreFVs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CorePrep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSubst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TrieMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreTidy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreUnfold"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreSeq"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PmExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TmOracle"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Check"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Coverage"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Desugar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsArrows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsCCall"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsGRHSs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsListComp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Match"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MatchCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MatchLit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsDoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsImpExp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsLit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PlaceHolder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HsUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BinIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BuildTyCl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IfaceType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LoadIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MkIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcIface"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FlagChecker"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Annotations"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CmdLineParser"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CodeOutput"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Config"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverMkDepend"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverPhases"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PipelineMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DriverPipeline"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DynFlags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ErrUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Finder"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcMake"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GhcPlugins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DynamicLoading"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HeaderInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscMain"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HscTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InteractiveEval"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InteractiveEvalTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PackageConfig"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Packages"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PlatformConstants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Plugins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPluginM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PprTyThing"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StaticFlags"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StaticPtrTable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SysTools"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Elf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TidyPgm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Ctype"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["HaddockUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Lexer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OptCoercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Parser"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RdrHsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ApiAnnotation"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ForeignCall"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrelRules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PrimOp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TysPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TysWiredIn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CostCentre"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ProfInit"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SCCfinal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnHsDoc"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnSource"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnSplice"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RnTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CSE"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FloatIn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FloatOut"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["LiberateCase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OccurAnal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SAT"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SetLevels"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplCore"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Simplify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SimplStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgStats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UnariseStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Rules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SpecConstr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Specialise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoreToStg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgLint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StgSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CallArity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DmdAnal"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["WorkWrap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["WwLib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FamInst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Inst"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcAnnotations"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcArrows"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcBinds"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcClassDcl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcDefaults"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcDeriv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcExpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcForeign"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcGenDeriv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcGenGenerics"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcHsSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcHsType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcInstDcls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcMType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcValidity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcMatches"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPat"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcPatSyn"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnDriver"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRnTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcRules"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSimplify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcErrors"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTyClsDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTyDecls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTypeable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcType"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcEvidence"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcUnify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcInteract"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcCanonical"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcFlatten"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcTypeNats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TcSplice"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Coercion"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DsMeta"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["THNames"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FamInstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FunDeps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["InstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TyCon"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CoAxiom"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Kind"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TyCoRep"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Unify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Bag"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BooleanFormula"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["BufWrite"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Digraph"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Encoding"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastFunctions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastMutInt"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FastStringEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Fingerprint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FiniteMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["FV"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphColor"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphOps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GraphPpr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["IOEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ListSetOps"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Maybes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["MonadUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["OrdList"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Outputable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Pair"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Panic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Pretty"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Stream"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["StringBuffer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqDFM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqDSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqFM"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["UniqSet"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Util"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins",
		"Initialise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Builtins"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Naming"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Local"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"Global"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad",
		"InstEnv"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Monad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Closure"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Hoisting"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"PADict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils",
		"Poly"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Utils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"Description"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PAMethods"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PADict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Generic",
		"PData"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Env"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"TyConDecl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Type",
		"Classify"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Convert"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Vect"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Var"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Env"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise",
		"Exp"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Vectorise"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hoopl",
		"Dataflow"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hoopl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["AsmCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["TargetReg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["NCGMonad"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Instruction"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Format"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Reg"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegClass"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PIC"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Platform"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["CPrim"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"RegInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["X86",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"RegInfo"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["PPC",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Regs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Imm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"AddrMode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Cond"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Instr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Stack"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"ShortcutJump"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Amode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"CondCode"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Gen32"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Gen64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Sanity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SPARC",
		"CodeGen",
		"Expand"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Liveness"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Main"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"ArchBase"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"ArchX86"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Coalesce"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"Spill"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"SpillClean"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"SpillCost"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Graph",
		"TrivColorable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Main"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"JoinToTargets"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Stats"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"StackMap"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"X86",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"X86_64",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"PPC",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RegAlloc",
		"Linear",
		"SPARC",
		"FreeRegs"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dwarf",
		"Constants"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Convert"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeAsm"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeGen"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeInstr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeItbls"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["ByteCodeLink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Debugger"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Linker"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["RtClosureInspect"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["DebuggerUtils"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Serialized"],
		 exposedReexport = Just (OriginalModule {
			originalPackageId = SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
			 originalModuleName = ModuleName ["GHC",
			"Serialized"]})}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-8.0.2",
	 hsLibraries = ["HSghc-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-8.0.2\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	SimpleUnitId (ComponentId "ghci-8.0.2"),
	SimpleUnitId (ComponentId "hoopl-3.10.2.1"),
	SimpleUnitId (ComponentId "hpc-0.6.0.3"),
	SimpleUnitId (ComponentId "process-1.4.3.0"),
	SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	SimpleUnitId (ComponentId "time-1.6.0.1"),
	SimpleUnitId (ComponentId "transformers-0.5.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-8.0.2\\ghc.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "ghc-boot"},
fromList [(Version {
	versionBranch = [8,
	0,
	2],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-boot"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	 compatPackageKey = "ghc-boot-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Shared functionality between GHC and its boot libraries",
	 description = "This library is shared between GHC, ghc-pkg, and other boot\nlibraries.\n\nA note about \"GHC.PackageDb\": it only deals with the subset of\nthe package database that the compiler cares about: modules\npaths etc and not package metadata like description, authors\netc. It is thus not a library interface to ghc-pkg and is *not*\nsuitable for modifying GHC package databases.\n\nThe package database format and this library are constructed in\nsuch a way that while ghc-pkg depends on Cabal, the GHC library\nand program do not have to depend on Cabal.",
	 category = "GHC",
	 abiHash = AbiHash "0fc75597d46e8e8594985ee91cb27cea",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PackageDb"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Serialized"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-boot-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-boot-8.0.2",
	 hsLibraries = ["HSghc-boot-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-8.0.2\\ghc-boot.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "ghc-boot-th"},
fromList [(Version {
	versionBranch = [8,
	0,
	2],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-boot-th"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	 compatPackageKey = "ghc-boot-th-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Shared functionality between GHC and the @template-haskell@\nlibrary",
	 description = "This library contains various bits shared between the @ghc@ and\n@template-haskell@ libraries.\n\nThis package exists to ensure that @template-haskell@ has a\nminimal set of transitive dependencies, since it is intended to\nbe depended upon by user code.",
	 category = "GHC",
	 abiHash = AbiHash "4e1eb36abff92d3426e9d4f43b300914",
	 exposed = False,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"LanguageExtensions",
		"Type"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Lexeme"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-th-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-boot-th-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghc-boot-th-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-boot-th-8.0.2",
	 hsLibraries = ["HSghc-boot-th-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-th-8.0.2\\ghc-boot-th.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-boot-th-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "ghc-prim"},
fromList [(Version {
	versionBranch = [0,
	5,
	0,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghc-prim"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghc-prim-0.5.0.0"),
	 compatPackageKey = "ghc-prim-0.5.0.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "GHC primitives",
	 description = "This package contains the primitive types and operations supplied by GHC.",
	 category = "GHC",
	 abiHash = AbiHash "5706be99cf7f0c34d17df2be5a93a4b8",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"CString"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Classes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Debug"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"IntWord64"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Magic"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"PrimopWrappers"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Tuple"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Types"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Prim"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-prim-0.5.0.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghc-prim-0.5.0.0"],
	 libraryDynDirs = ["$topdir\\ghc-prim-0.5.0.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghc-prim-0.5.0.0",
	 hsLibraries = ["HSghc-prim-0.5.0.0"],
	 extraLibraries = ["user32",
	"mingw32",
	"mingwex"],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "rts")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-prim-0.5.0.0\\ghc-prim.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghc-prim-0.5.0.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "ghci"},
fromList [(Version {
	versionBranch = [8,
	0,
	2],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "ghci"},
		 pkgVersion = Version {
			versionBranch = [8,
			0,
			2],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "ghci-8.0.2"),
	 compatPackageKey = "ghci-8.0.2",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "The library supporting GHC's interactive interpreter",
	 description = "This library offers interfaces which mediate interactions between the\n@ghci@ interactive shell and @iserv@, GHC's out-of-process interpreter\nbackend.",
	 category = "GHC",
	 abiHash = AbiHash "6f21b9750b724c03c938feebdad69b3b",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHCi",
		"BreakArray"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Message"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"ResolvedBCO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"RemoteTypes"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"ObjLink"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"CreateBCO"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"FFI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"InfoTable"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Run"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"Signals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"TH"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHCi",
		"TH",
		"Binary"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["SizedSeq"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghci-8.0.2"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\ghci-8.0.2"],
	 libraryDynDirs = ["$topdir\\ghci-8.0.2"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\ghci-8.0.2",
	 hsLibraries = ["HSghci-8.0.2"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "array-0.5.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "binary-0.8.3.0"),
	SimpleUnitId (ComponentId "bytestring-0.10.8.1"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-boot-8.0.2"),
	SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	SimpleUnitId (ComponentId "transformers-0.5.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghci-8.0.2\\ghci.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/ghci-8.0.2"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "haxbase"},
fromList [(Version {
	versionBranch = [1,
	0,
	0,
	3],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxbase"},
		 pkgVersion = Version {
			versionBranch = [1,
			0,
			0,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
	 compatPackageKey = "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM",
	 license = GPL Nothing,
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 homepage = "https://github.com/metaleap/haxbase#readme",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 abiHash = AbiHash "98eb18e68e3116170c039616236e8448",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Dbg"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"],
	 libraryDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 libraryDynDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 dataDir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share\\x86_64-windows-ghc-8.0.2\\haxbase-1.0.0.3",
	 hsLibraries = ["HShaxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxbase-1.0.0.3\\haxbase.haddock"],
	 haddockHTMLs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxbase-1.0.0.3"],
	 pkgRoot = Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d"}])]),
(PackageName {
	unPackageName = "haxpile"},
fromList [(Version {
	versionBranch = [0,
	1,
	0,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxpile"},
		 pkgVersion = Version {
			versionBranch = [0,
			1,
			0,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"),
	 compatPackageKey = "haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG",
	 license = GPL Nothing,
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 homepage = "https://github.com/metaleap/haxpile",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 abiHash = AbiHash "4ecb869109724bf01250b9477ee53f48",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Via",
		"CabalSetup"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Via",
		"Frontend"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"ADT"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"Base"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Hxp",
		"ES"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"],
	 libraryDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 libraryDynDirs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\lib\\x86_64-windows-ghc-8.0.2",
	"C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
	 dataDir = "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\share\\x86_64-windows-ghc-8.0.2\\haxpile-0.1.0.0",
	 hsLibraries = ["HShaxpile-0.1.0.0-AeCMZYDjMvPKHwk6tWTlKG"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Cabal-1.24.2.0"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "ghc-8.0.2"),
	SimpleUnitId (ComponentId "haxbase-1.0.0.3-83ZdZOn6t3KFL1qCXsvZfM"),
	SimpleUnitId (ComponentId "process-1.4.3.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-0.1.0.0\\haxpile.haddock"],
	 haddockHTMLs = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\doc\\haxpile-0.1.0.0"],
	 pkgRoot = Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d"}])]),
(PackageName {
	unPackageName = "hoopl"},
fromList [(Version {
	versionBranch = [3,
	10,
	2,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "hoopl"},
		 pkgVersion = Version {
			versionBranch = [3,
			10,
			2,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "hoopl-3.10.2.1"),
	 compatPackageKey = "hoopl-3.10.2.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "nr@cs.tufts.edu, andreas.voellmy@gmail.com, email@ningwang.org",
	 author = "Norman Ramsey, Joao Dias, Simon Marlow and Simon Peyton Jones",
	 stability = "",
	 homepage = "http://ghc.cs.tufts.edu/hoopl/",
	 pkgUrl = "",
	 synopsis = "A library to support dataflow analysis and optimization",
	 description = "Higher-order optimization library\n\nSee /Norman Ramsey, Joao Dias, and Simon Peyton Jones./\n<http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf \"Hoopl: A Modular, Reusable Library for Dataflow Analysis and Transformation\"> /(2010)/ for more details.",
	 category = "Compilers/Interpreters",
	 abiHash = AbiHash "4ae02921e41b8daf8c71d245874a8ce7",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Wrappers"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Passes",
		"Dominator"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Compiler",
		"Hoopl",
		"Passes",
		"DList"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Compiler",
	"Hoopl",
	"Checkpoint"],
	ModuleName ["Compiler",
	"Hoopl",
	"Collections"],
	ModuleName ["Compiler",
	"Hoopl",
	"Combinators"],
	ModuleName ["Compiler",
	"Hoopl",
	"Dataflow"],
	ModuleName ["Compiler",
	"Hoopl",
	"Debug"],
	ModuleName ["Compiler",
	"Hoopl",
	"Block"],
	ModuleName ["Compiler",
	"Hoopl",
	"Graph"],
	ModuleName ["Compiler",
	"Hoopl",
	"Label"],
	ModuleName ["Compiler",
	"Hoopl",
	"MkGraph"],
	ModuleName ["Compiler",
	"Hoopl",
	"Fuel"],
	ModuleName ["Compiler",
	"Hoopl",
	"Pointed"],
	ModuleName ["Compiler",
	"Hoopl",
	"Shape"],
	ModuleName ["Compiler",
	"Hoopl",
	"Show"],
	ModuleName ["Compiler",
	"Hoopl",
	"Unique"],
	ModuleName ["Compiler",
	"Hoopl",
	"XUtil"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hoopl-3.10.2.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hoopl-3.10.2.1"],
	 libraryDynDirs = ["$topdir\\hoopl-3.10.2.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\hoopl-3.10.2.1",
	 hsLibraries = ["HShoopl-3.10.2.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "containers-0.5.7.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hoopl-3.10.2.1\\hoopl.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hoopl-3.10.2.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "hpc"},
fromList [(Version {
	versionBranch = [0,
	6,
	0,
	3],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "hpc"},
		 pkgVersion = Version {
			versionBranch = [0,
			6,
			0,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "hpc-0.6.0.3"),
	 compatPackageKey = "hpc-0.6.0.3",
	 license = BSD3,
	 copyright = "",
	 maintainer = "ghc-devs@haskell.org",
	 author = "Andy Gill",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Code Coverage Library for Haskell",
	 description = "This package provides the code coverage library for Haskell.\n\nSee <http://www.haskell.org/haskellwiki/Haskell_program_coverage> for more\ninformation.",
	 category = "Control",
	 abiHash = AbiHash "b2cb7d8ff2610d738da2506af95cfd06",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Util"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Mix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Tix"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Trace",
		"Hpc",
		"Reflect"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hpc-0.6.0.3"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\hpc-0.6.0.3"],
	 libraryDynDirs = ["$topdir\\hpc-0.6.0.3"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\hpc-0.6.0.3",
	 hsLibraries = ["HShpc-0.6.0.3"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "containers-0.5.7.1"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1"),
	SimpleUnitId (ComponentId "time-1.6.0.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hpc-0.6.0.3\\hpc.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/hpc-0.6.0.3"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "integer-gmp"},
fromList [(Version {
	versionBranch = [1,
	0,
	0,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "integer-gmp"},
		 pkgVersion = Version {
			versionBranch = [1,
			0,
			0,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "integer-gmp-1.0.0.1"),
	 compatPackageKey = "integer-gmp-1.0.0.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "hvr@gnu.org",
	 author = "Herbert Valerio Riedel",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Integer library based on GMP",
	 description = "",
	 category = "Numeric, Algebra",
	 abiHash = AbiHash "27b59801da8c5958521b8c39b2008a76",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"Logarithms"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"Logarithms",
		"Internals"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["GHC",
		"Integer",
		"GMP",
		"Internals"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["GHC",
	"Integer",
	"Type"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1"],
	 libraryDynDirs = ["$topdir\\integer-gmp-1.0.0.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\integer-gmp-1.0.0.1",
	 hsLibraries = ["HSinteger-gmp-1.0.0.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\integer-gmp-1.0.0.1\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/integer-gmp-1.0.0.1\\integer-gmp.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/integer-gmp-1.0.0.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "pretty"},
fromList [(Version {
	versionBranch = [1,
	1,
	3,
	3],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "pretty"},
		 pkgVersion = Version {
			versionBranch = [1,
			1,
			3,
			3],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "pretty-1.1.3.3"),
	 compatPackageKey = "pretty-1.1.3.3",
	 license = BSD3,
	 copyright = "",
	 maintainer = "David Terei <code@davidterei.com>",
	 author = "",
	 stability = "Stable",
	 homepage = "http://github.com/haskell/pretty",
	 pkgUrl = "",
	 synopsis = "Pretty-printing library",
	 description = "This package contains a pretty-printing library, a set of API's\nthat provides a way to easily print out text in a consistent\nformat of your choosing. This is useful for compilers and related\ntools.\n\nThis library was originally designed by John Hughes's and has since\nbeen heavily modified by Simon Peyton Jones.",
	 category = "Text",
	 abiHash = AbiHash "4afce9837895e3da781eb72b7c392147",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"HughesPJ"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"HughesPJClass"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated",
		"HughesPJ"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Text",
		"PrettyPrint",
		"Annotated",
		"HughesPJClass"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\pretty-1.1.3.3"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\pretty-1.1.3.3"],
	 libraryDynDirs = ["$topdir\\pretty-1.1.3.3"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\pretty-1.1.3.3",
	 hsLibraries = ["HSpretty-1.1.3.3"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "ghc-prim-0.5.0.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/pretty-1.1.3.3\\pretty.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/pretty-1.1.3.3"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "process"},
fromList [(Version {
	versionBranch = [1,
	4,
	3,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "process"},
		 pkgVersion = Version {
			versionBranch = [1,
			4,
			3,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "process-1.4.3.0"),
	 compatPackageKey = "process-1.4.3.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Process libraries",
	 description = "This package contains libraries for dealing with system processes.",
	 category = "System",
	 abiHash = AbiHash "4a7c4457205fbe5c573896dea8d32178",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["System",
		"Cmd"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Process"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["System",
		"Process",
		"Internals"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["System",
	"Process",
	"Common"],
	ModuleName ["System",
	"Process",
	"Windows"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0"],
	 libraryDynDirs = ["$topdir\\process-1.4.3.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\process-1.4.3.0",
	 hsLibraries = ["HSprocess-1.4.3.0"],
	 extraLibraries = ["kernel32"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\process-1.4.3.0\\include"],
	 includes = ["runProcess.h"],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0"),
	SimpleUnitId (ComponentId "directory-1.3.0.0"),
	SimpleUnitId (ComponentId "filepath-1.4.1.1")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/process-1.4.3.0\\process.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/process-1.4.3.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "rts"},
fromList [(Version {
	versionBranch = [1,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "rts"},
		 pkgVersion = Version {
			versionBranch = [1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "rts"),
	 compatPackageKey = "rts",
	 license = BSD3,
	 copyright = "",
	 maintainer = "glasgow-haskell-users@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "",
	 description = "",
	 category = "",
	 abiHash = AbiHash "",
	 exposed = True,
	 exposedModules = [],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = [],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/rts"],
	 libraryDynDirs = [],
	 dataDir = "",
	 hsLibraries = ["HSrts",
	"Cffi-6"],
	 extraLibraries = ["m",
	"wsock32",
	"gdi32",
	"winmm",
	"pthread"],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/include"],
	 includes = ["Stg.h"],
	 depends = [],
	 ccOptions = [],
	 ldOptions = ["-Wl,-u,ghczmprim_GHCziTypes_Izh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Czh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Fzh_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Dzh_static_info",
	"-Wl,-u,base_GHCziPtr_Ptr_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Wzh_static_info",
	"-Wl,-u,base_GHCziInt_I8zh_static_info",
	"-Wl,-u,base_GHCziInt_I16zh_static_info",
	"-Wl,-u,base_GHCziInt_I32zh_static_info",
	"-Wl,-u,base_GHCziInt_I64zh_static_info",
	"-Wl,-u,base_GHCziWord_W8zh_static_info",
	"-Wl,-u,base_GHCziWord_W16zh_static_info",
	"-Wl,-u,base_GHCziWord_W32zh_static_info",
	"-Wl,-u,base_GHCziWord_W64zh_static_info",
	"-Wl,-u,base_GHCziStable_StablePtr_static_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Izh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Czh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Fzh_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_Dzh_con_info",
	"-Wl,-u,base_GHCziPtr_Ptr_con_info",
	"-Wl,-u,base_GHCziPtr_FunPtr_con_info",
	"-Wl,-u,base_GHCziStable_StablePtr_con_info",
	"-Wl,-u,ghczmprim_GHCziTypes_False_closure",
	"-Wl,-u,ghczmprim_GHCziTypes_True_closure",
	"-Wl,-u,base_GHCziPack_unpackCString_closure",
	"-Wl,-u,base_GHCziIOziException_stackOverflow_closure",
	"-Wl,-u,base_GHCziIOziException_heapOverflow_closure",
	"-Wl,-u,base_ControlziExceptionziBase_nonTermination_closure",
	"-Wl,-u,base_GHCziIOziException_blockedIndefinitelyOnMVar_closure",
	"-Wl,-u,base_GHCziIOziException_blockedIndefinitelyOnSTM_closure",
	"-Wl,-u,base_GHCziIOziException_allocationLimitExceeded_closure",
	"-Wl,-u,base_ControlziExceptionziBase_nestedAtomically_closure",
	"-Wl,-u,base_GHCziEventziThread_blockedOnBadFD_closure",
	"-Wl,-u,base_GHCziWeak_runFinalizzerBatch_closure",
	"-Wl,-u,base_GHCziTopHandler_flushStdHandles_closure",
	"-Wl,-u,base_GHCziTopHandler_runIO_closure",
	"-Wl,-u,base_GHCziTopHandler_runNonIO_closure",
	"-Wl,-u,base_GHCziConcziIO_ensureIOManagerIsRunning_closure",
	"-Wl,-u,base_GHCziConcziIO_ioManagerCapabilitiesChanged_closure",
	"-Wl,-u,base_GHCziConcziSync_runSparks_closure",
	"-Wl,-u,base_GHCziConcziSignal_runHandlersPtr_closure"],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = [],
	 haddockHTMLs = [],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "template-haskell"},
fromList [(Version {
	versionBranch = [2,
	11,
	1,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "template-haskell"},
		 pkgVersion = Version {
			versionBranch = [2,
			11,
			1,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "template-haskell-2.11.1.0"),
	 compatPackageKey = "template-haskell-2.11.1.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "libraries@haskell.org",
	 author = "",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Support library for Template Haskell",
	 description = "This package provides modules containing facilities for manipulating\nHaskell source code using Template Haskell.\n\nSee <http://www.haskell.org/haskellwiki/Template_Haskell> for more\ninformation.",
	 category = "Template Haskell",
	 abiHash = AbiHash "526a1de7b3f9048e8d3908ee8174f433",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Lib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Ppr"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"PprLib"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Quote"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"Syntax"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Language",
		"Haskell",
		"TH",
		"LanguageExtensions"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Language",
	"Haskell",
	"TH",
	"Lib",
	"Map"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\template-haskell-2.11.1.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\template-haskell-2.11.1.0"],
	 libraryDynDirs = ["$topdir\\template-haskell-2.11.1.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\template-haskell-2.11.1.0",
	 hsLibraries = ["HStemplate-haskell-2.11.1.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "ghc-boot-th-8.0.2"),
	SimpleUnitId (ComponentId "pretty-1.1.3.3")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/template-haskell-2.11.1.0\\template-haskell.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/template-haskell-2.11.1.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "time"},
fromList [(Version {
	versionBranch = [1,
	6,
	0,
	1],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "time"},
		 pkgVersion = Version {
			versionBranch = [1,
			6,
			0,
			1],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "time-1.6.0.1"),
	 compatPackageKey = "time-1.6.0.1",
	 license = BSD3,
	 copyright = "",
	 maintainer = "<ashley@semantic.org>",
	 author = "Ashley Yakeley",
	 stability = "stable",
	 homepage = "https://github.com/haskell/time",
	 pkgUrl = "",
	 synopsis = "A time library",
	 description = "A time library",
	 category = "System",
	 abiHash = AbiHash "21731b74b30cba4f439003962ded663f",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"MonthDay"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"OrdinalDate"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"WeekDate"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"Julian"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Calendar",
		"Easter"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock",
		"POSIX"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Clock",
		"TAI"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"LocalTime"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time",
		"Format"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Time"],
		 exposedReexport = Nothing}],
	 hiddenModules = [ModuleName ["Data",
	"Time",
	"Calendar",
	"Private"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"Days"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"Gregorian"],
	ModuleName ["Data",
	"Time",
	"Calendar",
	"JulianYearDay"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"Scale"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"UTC"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"CTimeval"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"CTimespec"],
	ModuleName ["Data",
	"Time",
	"Clock",
	"UTCDiff"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"TimeZone"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"TimeOfDay"],
	ModuleName ["Data",
	"Time",
	"LocalTime",
	"LocalTime"],
	ModuleName ["Data",
	"Time",
	"Format",
	"Parse"],
	ModuleName ["Data",
	"Time",
	"Format",
	"Locale"]],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1"],
	 libraryDynDirs = ["$topdir\\time-1.6.0.1"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\time-1.6.0.1",
	 hsLibraries = ["HStime-1.6.0.1"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\time-1.6.0.1\\include"],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "Win32-2.3.1.1"),
	SimpleUnitId (ComponentId "base-4.9.1.0"),
	SimpleUnitId (ComponentId "deepseq-1.4.2.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/time-1.6.0.1\\time.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/time-1.6.0.1"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])]),
(PackageName {
	unPackageName = "transformers"},
fromList [(Version {
	versionBranch = [0,
	5,
	2,
	0],
	 versionTags = []},
[InstalledPackageInfo {
	sourcePackageId = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "transformers"},
		 pkgVersion = Version {
			versionBranch = [0,
			5,
			2,
			0],
			 versionTags = []}},
	 installedUnitId = SimpleUnitId (ComponentId "transformers-0.5.2.0"),
	 compatPackageKey = "transformers-0.5.2.0",
	 license = BSD3,
	 copyright = "",
	 maintainer = "Ross Paterson <R.Paterson@city.ac.uk>",
	 author = "Andy Gill, Ross Paterson",
	 stability = "",
	 homepage = "",
	 pkgUrl = "",
	 synopsis = "Concrete functor and monad transformers",
	 description = "A portable library of functor and monad transformers, inspired by\nthe paper \\\"Functional Programming with Overloading and Higher-Order\nPolymorphism\\\", by Mark P Jones,\nin /Advanced School of Functional Programming/, 1995\n(<http://web.cecs.pdx.edu/~mpj/pubs/springschool.html>).\n\nThis package contains:\n\n* the monad transformer class (in \"Control.Monad.Trans.Class\")\nand IO monad class (in \"Control.Monad.IO.Class\")\n\n* concrete functor and monad transformers, each with associated\noperations and functions to lift operations associated with other\ntransformers.\n\nThe package can be used on its own in portable Haskell code, in\nwhich case operations need to be manually lifted through transformer\nstacks (see \"Control.Monad.Trans.Class\" for some examples).\nAlternatively, it can be used with the non-portable monad classes in\nthe @mtl@ or @monads-tf@ packages, which automatically lift operations\nintroduced by monad transformers through other transformers.",
	 category = "Control",
	 abiHash = AbiHash "b1116afc60a191b846453e1878035514",
	 exposed = True,
	 exposedModules = [ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative",
		"Backwards"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Applicative",
		"Lift"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Signatures"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Class"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Cont"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Except"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Error"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Identity"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"List"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Maybe"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Reader"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"RWS",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"State",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer",
		"Lazy"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Control",
		"Monad",
		"Trans",
		"Writer",
		"Strict"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Constant"],
		 exposedReexport = Nothing},
	ExposedModule {
		exposedName = ModuleName ["Data",
		"Functor",
		"Reverse"],
		 exposedReexport = Nothing}],
	 hiddenModules = [],
	 trusted = False,
	 importDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\transformers-0.5.2.0"],
	 libraryDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib\\transformers-0.5.2.0"],
	 libraryDynDirs = ["$topdir\\transformers-0.5.2.0"],
	 dataDir = "$topdir\\x86_64-windows-ghc-8.0.2\\transformers-0.5.2.0",
	 hsLibraries = ["HStransformers-0.5.2.0"],
	 extraLibraries = [],
	 extraGHCiLibraries = [],
	 includeDirs = [],
	 includes = [],
	 depends = [SimpleUnitId (ComponentId "base-4.9.1.0")],
	 ccOptions = [],
	 ldOptions = [],
	 frameworkDirs = [],
	 frameworks = [],
	 haddockInterfaces = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/transformers-0.5.2.0\\transformers.haddock"],
	 haddockHTMLs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib/../doc/html/libraries/transformers-0.5.2.0"],
	 pkgRoot = Just "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\lib"}])])]),
 pkgDescrFile = Just ".\\haxpile-apptests.cabal",
 localPkgDescr = PackageDescription {
	package = PackageIdentifier {
		pkgName = PackageName {
			unPackageName = "haxpile-apptests"},
		 pkgVersion = Version {
			versionBranch = [0,
			1,
			0,
			0],
			 versionTags = []}},
	 license = GPL Nothing,
	 licenseFiles = ["LICENSE"],
	 copyright = "Phil Schumann",
	 maintainer = "metaleap@mailbox.org",
	 author = "metaleap",
	 stability = "",
	 testedWith = [],
	 homepage = "https://github.com/metaleap/haxpile-apptests",
	 pkgUrl = "",
	 bugReports = "",
	 sourceRepos = [],
	 synopsis = "",
	 description = "",
	 category = "Misc",
	 customFieldsPD = [],
	 buildDepends = [Dependency (PackageName {
		unPackageName = "base"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [4,
		9,
		1,
		0],
		 versionTags = []}))),
	Dependency (PackageName {
		unPackageName = "haxbase"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [1,
		0,
		0,
		3],
		 versionTags = []}))),
	Dependency (PackageName {
		unPackageName = "haxpile"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
		versionBranch = [0,
		1,
		0,
		0],
		 versionTags = []})))],
	 specVersionRaw = Right (UnionVersionRanges (ThisVersion (Version {
		versionBranch = [1,
		10],
		 versionTags = []})) (LaterVersion (Version {
		versionBranch = [1,
		10],
		 versionTags = []}))),
	 buildType = Just Custom,
	 setupBuildInfo = Just (SetupBuildInfo {
		setupDepends = [Dependency (PackageName {
			unPackageName = "base"}) AnyVersion,
		Dependency (PackageName {
			unPackageName = "haxpile"}) AnyVersion],
		 defaultSetupDepends = False}),
	 library = Just (Library {
		exposedModules = [ModuleName ["HxpT",
		"T01_PrimAdd"],
		ModuleName ["HxpT",
		"T02_FacRec"]],
		 reexportedModules = [],
		 requiredSignatures = [],
		 exposedSignatures = [],
		 libExposed = True,
		 libBuildInfo = BuildInfo {
			buildable = True,
			 buildTools = [],
			 cppOptions = [],
			 ccOptions = [],
			 ldOptions = [],
			 pkgconfigDepends = [],
			 frameworks = [],
			 extraFrameworkDirs = [],
			 cSources = [],
			 jsSources = [],
			 hsSourceDirs = ["src"],
			 otherModules = [],
			 defaultLanguage = Just Haskell2010,
			 otherLanguages = [],
			 defaultExtensions = [],
			 otherExtensions = [],
			 oldExtensions = [],
			 extraLibs = [],
			 extraGHCiLibs = [],
			 extraLibDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\lib"],
			 includeDirs = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\include"],
			 includes = [],
			 installIncludes = [],
			 options = [(GHC,
			["-j2",
			"-O0",
			"-ddump-stg"])],
			 profOptions = [],
			 sharedOptions = [],
			 customFieldsBI = [],
			 targetBuildDepends = [Dependency (PackageName {
				unPackageName = "base"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [4,
				9,
				1,
				0],
				 versionTags = []}))),
			Dependency (PackageName {
				unPackageName = "haxbase"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [1,
				0,
				0,
				3],
				 versionTags = []}))),
			Dependency (PackageName {
				unPackageName = "haxpile"}) (IntersectVersionRanges AnyVersion (ThisVersion (Version {
				versionBranch = [0,
				1,
				0,
				0],
				 versionTags = []})))],
			 targetBuildRenaming = fromList []}}),
	 executables = [],
	 testSuites = [],
	 benchmarks = [],
	 dataFiles = [],
	 dataDir = "",
	 extraSrcFiles = [],
	 extraTmpFiles = [],
	 extraDocFiles = []},
 withPrograms = [("ar",
ConfiguredProgram {
	programId = "ar",
	 programVersion = Nothing,
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin\\ar.exe"},
	 programMonitorFiles = ["$topdir/../mingw/bin\\ar.exe",
	"$topdir/../mingw/bin\\ar.exe.exe"]}),
("gcc",
ConfiguredProgram {
	programId = "gcc",
	 programVersion = Just (Version {
		versionBranch = [5,
		2,
		0],
		 versionTags = []}),
	 programDefaultArgs = ["-fno-stack-protector"],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin\\gcc.exe"},
	 programMonitorFiles = ["$topdir/../mingw/bin\\gcc.exe",
	"$topdir/../mingw/bin\\gcc.exe.exe"]}),
("ghc",
ConfiguredProgram {
	programId = "ghc",
	 programVersion = Just (Version {
		versionBranch = [8,
		0,
		2],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = ["-ddump-hi",
	"-ddump-to-file"],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = UserSpecified {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\ghc.EXE"},
	 programMonitorFiles = []}),
("ghc-pkg",
ConfiguredProgram {
	programId = "ghc-pkg",
	 programVersion = Just (Version {
		versionBranch = [8,
		0,
		2],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = UserSpecified {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\ghc-pkg.EXE"},
	 programMonitorFiles = []}),
("haddock",
ConfiguredProgram {
	programId = "haddock",
	 programVersion = Just (Version {
		versionBranch = [2,
		17,
		3],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\haddock.exe"},
	 programMonitorFiles = []}),
("haskell-suite",
ConfiguredProgram {
	programId = "haskell-suite",
	 programVersion = Nothing,
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "haskell-suite-dummy-location"},
	 programMonitorFiles = []}),
("haskell-suite-pkg",
ConfiguredProgram {
	programId = "haskell-suite-pkg",
	 programVersion = Nothing,
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "haskell-suite-pkg-dummy-location"},
	 programMonitorFiles = []}),
("hpc",
ConfiguredProgram {
	programId = "hpc",
	 programVersion = Just (Version {
		versionBranch = [0,
		67],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\hpc.exe"},
	 programMonitorFiles = ["D:\\dev\\hs\\haxpile-apptests\\.stack-work\\dist\\ca59d0ab\\setup\\hpc",
	"D:\\dev\\hs\\haxpile-apptests\\hpc",
	"C:\\WINDOWS\\system32\\hpc",
	"C:\\WINDOWS\\hpc",
	"D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin\\hpc",
	"C:\\sr\\snapshots\\feb626b3\\bin\\hpc"]}),
("hsc2hs",
ConfiguredProgram {
	programId = "hsc2hs",
	 programVersion = Just (Version {
		versionBranch = [0,
		68,
		1],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin\\hsc2hs.exe"},
	 programMonitorFiles = []}),
("ld",
ConfiguredProgram {
	programId = "ld",
	 programVersion = Nothing,
	 programDefaultArgs = ["-x"],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin\\ld.exe"},
	 programMonitorFiles = ["$topdir/../mingw/bin\\ld.exe",
	"$topdir/../mingw/bin\\ld.exe.exe"]}),
("strip",
ConfiguredProgram {
	programId = "strip",
	 programVersion = Just (Version {
		versionBranch = [2,
		25],
		 versionTags = []}),
	 programDefaultArgs = [],
	 programOverrideArgs = [],
	 programOverrideEnv = [("PATH",
	Just "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\bin;C:\\sr\\snapshots\\feb626b3\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\mingw64\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\bin;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\msys2-20150512\\usr\\local\\bin;C:\\gd\\bin;C:\\g\\1.3.3\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\ProgramData\\Lenovo\\ReadyApps;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\bin;C:\\sr;C:\\Users\\roxor\\AppData\\Roaming\\local\\bin;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\")],
	 programProperties = fromList [],
	 programLocation = FoundOnSystem {
		locationPath = "C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin\\strip.exe"},
	 programMonitorFiles = ["C:\\Users\\roxor\\AppData\\Local\\Programs\\stack\\x86_64-windows\\ghc-8.0.2\\mingw\\bin\\strip"]})],
 withPackageDB = [GlobalPackageDB,
SpecificPackageDB "C:\\sr\\snapshots\\feb626b3\\pkgdb",
SpecificPackageDB "D:\\dev\\hs\\haxpile-apptests\\.stack-work\\install\\6db3355d\\pkgdb"],
 withVanillaLib = True,
 withProfLib = False,
 withSharedLib = False,
 withDynExe = False,
 withProfExe = False,
 withProfLibDetail = ProfDetailDefault,
 withProfExeDetail = ProfDetailDefault,
 withOptimization = NormalOptimisation,
 withDebugInfo = NoDebugInfo,
 withGHCiLib = True,
 splitObjs = False,
 stripExes = True,
 stripLibs = True,
 progPrefix = "",
 progSuffix = "",
 relocatable = False})
